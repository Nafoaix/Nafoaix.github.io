<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WSL2内使用Windows的v2ray代理</title>
      <link href="/archives/88ca14b9.html"/>
      <url>/archives/88ca14b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="WSL2内使用Windows的v2ray代理"><a href="#WSL2内使用Windows的v2ray代理" class="headerlink" title="WSL2内使用Windows的v2ray代理"></a>WSL2内使用Windows的v2ray代理</h1><blockquote><p>在WSL2中使用install或git命令是总是因为网速问题失败，我们在部署配置环境时就最好需要使用代理，但WSL2 因为是通过虚拟机的方式实现,网络不再像 WSL1 一样与 Windows 共享,变成了一个新的网段,所以想使用宿主机的代理就比较麻烦，这里参考网上资料这里给出设置方法。</p></blockquote><h2 id="一、Windows内设置"><a href="#一、Windows内设置" class="headerlink" title="一、Windows内设置"></a>一、Windows内设置</h2><h3 id="v2ray客户端开启允许来自局域网的连接"><a href="#v2ray客户端开启允许来自局域网的连接" class="headerlink" title="v2ray客户端开启允许来自局域网的连接"></a>v2ray客户端开启允许来自局域网的连接</h3><p><img src="https://s2.loli.net/2022/07/21/ZAP2XURyg8BG3Y9.png" alt="v2ray客户端开启允许来自局域网的连接"></p><h2 id="二、WSL2内设置"><a href="#二、WSL2内设置" class="headerlink" title="二、WSL2内设置"></a>二、WSL2内设置</h2><h3 id="1-修改DNS服务器地址"><a href="#1-修改DNS服务器地址" class="headerlink" title="1. 修改DNS服务器地址"></a>1. 修改DNS服务器地址</h3><p>修改由于使用代理不能再通过宿主机IP获取<code>nameserver</code>,这里在<code>/etc/resolv.conf</code>直接设置<code>nameserver</code>为GoogleDNS地址<code>8.8.8.8</code>或者其他可用的dns服务器地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:</span></span><br><span class="line"><span class="comment"># [network]</span></span><br><span class="line"><span class="comment"># generateResolvConf = false</span></span><br><span class="line"></span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>根据此注释可以看到这个文件是由 WSL 自动生成的。也就是每次自动生成就会覆盖掉我们对<code>nameserver</code>的修改，要停止自动生成此文件要在<code>/etc/wsl.conf</code>中设置<code>generateResolvConf</code>为<code>false</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="2-获取主机IP并设置代理"><a href="#2-获取主机IP并设置代理" class="headerlink" title="2. 获取主机IP并设置代理"></a>2. 获取主机IP并设置代理</h3><p>WSL2 会在首次启动时创建一个虚拟网卡用于提供 WSL2 的网络，默认情况下这个网段是动态，这里我们使用<code>ip route</code>命令在网络路由信息中找到主机在WSL2中映射的IP地址。</p><p><img src="https://s2.loli.net/2022/07/21/HFM7YphuR9w4Xes.png" alt="ip route"></p><p>有了主机IP之后我们就可以通过v2ray中设置的端口设置代理了（v2ray中默认本地监听端口为<code>10808</code>）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;socks5://主机IP:&lt;Port&gt;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;socks5://主机IP:&lt;Port&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>设置完之后可以用<code>curl -v google.com</code>测试下。</p><h3 id="3-编辑bashrc配置文件实现代理命令"><a href="#3-编辑bashrc配置文件实现代理命令" class="headerlink" title="3. 编辑bashrc配置文件实现代理命令"></a>3. 编辑bashrc配置文件实现代理命令</h3><p>在主目录中找到bash的隐藏配置文件<code>.bashrc</code>，在文件后面加入以下代码，后面就可以使用<code>proxy</code>命令和<code>unproxy</code>命令实现代理或取消代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># add for proxy</span></span><br><span class="line"><span class="comment"># add for proxy</span></span><br><span class="line"><span class="built_in">export</span> hostip=$(ip route | grep default | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> hostport=10808</span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    export HTTPS_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    export HTTP_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    export ALL_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    git config --global http.proxy &quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    git config --global https.proxy &quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::http::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;hostport&#125;\&quot;; &quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::https::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;hostport&#125;\&quot;; &quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    unset HTTPS_PROXY;</span></span><br><span class="line"><span class="string">    unset HTTP_PROXY;</span></span><br><span class="line"><span class="string">    unset ALL_PROXY;</span></span><br><span class="line"><span class="string">    git config --global --unset  http.proxy;</span></span><br><span class="line"><span class="string">    git config --global --unset  https.proxy;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &#x27;</span>/Acquire::http::Proxy/d<span class="string">&#x27; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &#x27;</span>/Acquire::https::Proxy/d<span class="string">&#x27; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="三、测试效果"><a href="#三、测试效果" class="headerlink" title="三、测试效果"></a>三、测试效果</h2><p>用户对 bashrc 所作的任何更改将在您下次启动终端时应用，如果想立即生效可以手动执行如下命令刷新:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>重启终端或刷新配置文件后</p><p><img src="https://s2.loli.net/2022/07/21/S1V3Fivd6Z4EDh7.png" alt="测试效果"></p><h2 id="四、错误排查"><a href="#四、错误排查" class="headerlink" title="四、错误排查"></a>四、错误排查</h2><p>如果配置不起作用或报错需排查以下：</p><h3 id="1-DNS服务器地址设置错误"><a href="#1-DNS服务器地址设置错误" class="headerlink" title="1. DNS服务器地址设置错误"></a>1. DNS服务器地址设置错误</h3><p>ping youtube.com  测试是否解析出IP（解析出IP之后最后全部丢包没关系，只要解析出域名对应的IP），否则需要验证是否正确配置DNS服务器地址。</p><h3 id="2-环境变量是否正确导出"><a href="#2-环境变量是否正确导出" class="headerlink" title="2. 环境变量是否正确导出"></a>2. 环境变量是否正确导出</h3><p>通过输出<code>echo $HTTP_PROXY</code>查看环境变量是否正确导出</p><h3 id="3-防火墙是否开启"><a href="#3-防火墙是否开启" class="headerlink" title="3. 防火墙是否开启"></a>3. 防火墙是否开启</h3><p>如在WSL2中ping主机不通，需在Windows系统中检查防火墙和网络保护界面中的防火墙设置，是否允许应用通过防火墙。</p><h3 id="4-主机端v2ray是否可用"><a href="#4-主机端v2ray是否可用" class="headerlink" title="4. 主机端v2ray是否可用"></a>4. 主机端v2ray是否可用</h3><p>如果检查各项配置都确认正确需检查主机端v2ray是否正常可用，可在windows terminal下运行<code>curl youtube.com</code>验证。</p><h3 id="5-etc-resolv-conf重启丢失"><a href="#5-etc-resolv-conf重启丢失" class="headerlink" title="5. /etc/resolv.conf重启丢失"></a>5. /etc/resolv.conf重启丢失</h3><p>如果之前代理正常，WSL2重启之后代理不可用，需检查<code>/etc/resolv.conf</code>文件是否丢失或被重置为默认。<br>造成这种情况的原因有很多，但在WSL中大概率是被系统重置了，我们这里直接使用<code>resolvconfig</code>应用实现DNS信息管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install resolvconf</span><br></pre></td></tr></table></figure><p>安装后配置<code>/etc/resolvconf/resolv.conf.d/base</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>配置好后使用<code>resolvconf -u</code>更新resolvconf应用并使用下面命令查看并启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service resolvconf start</span><br><span class="line">service --status-all</span><br></pre></td></tr></table></figure><p>或直接配置好<code>/etc/resolv.conf</code>文件后使用<code>chattr</code>命令改变其文件属性不得任意更动文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/resolv.conf</span><br><span class="line">sudo bash -c <span class="string">&#x27;echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf&#x27;</span></span><br><span class="line">sudo bash -c <span class="string">&#x27;echo &quot;[network]&quot; &gt; /etc/wsl.conf&#x27;</span></span><br><span class="line">sudo bash -c <span class="string">&#x27;echo &quot;generateResolvConf = false&quot; &gt;&gt; /etc/wsl.conf&#x27;</span></span><br><span class="line">sudo chattr +i /etc/resolv.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> v2ray代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电视盒子做小型服务器（华为海思Hi3798Mv100）</title>
      <link href="/archives/7f84f586.html"/>
      <url>/archives/7f84f586.html</url>
      
        <content type="html"><![CDATA[<h1 id="电视盒子做小型服务器（华为海思Hi3798Mv100）"><a href="#电视盒子做小型服务器（华为海思Hi3798Mv100）" class="headerlink" title="电视盒子做小型服务器（华为海思Hi3798Mv100）"></a>电视盒子做小型服务器（华为海思Hi3798Mv100）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>翻找东西时发现了闲置的一个电信电视盒子，在网上查找了下相关资料挺多的，而且其SDK已经公开，盒子主控是华为海思Hi3798Mv100，四核ARM Cortex A7，主频高达1.5GHz，我这个是1G内存8G的存储的版本，有SD卡槽和两个USB接口，可以外接存储设备扩展，还有蓝牙WIFI功能，功耗仅有3w左右，刷上Ubuntu系统后可玩性非常高，下面就改造下使其变成一个小型的服务器。</p><h2 id="拆机硬件"><a href="#拆机硬件" class="headerlink" title="拆机硬件"></a>拆机硬件</h2><p>拧下前面脚垫下方的两个螺丝后就可以用撬板撬下外壳，上下外壳有卡扣连接，没有撬板的话用螺丝刀慢慢撬也可以，只不过会留下些痕迹。</p><p><img src="https://cdn.nafx.top/post_cover/20220902231805.png" alt="拆机网图"></p><p>之前拆开忘记拍了这里补一个拆机网图，可以清楚的看到板子上的外设，两片南亚的512MB的闪存，背面一片8GB的闪迪eMMC芯片，瑞昱的RTL8188FTV低功耗无线芯片 ，双USB2.0接口。</p><p>在这个SD卡槽边上有一个预留的调试串口，我们可以自己焊上个座子然后用杜邦线连接好USB转串口的模块来烧录固件。</p><p><img src="https://cdn.nafx.top/post_cover/69743ba1d160e9779cca79cada51e68.jpg" alt="调试串口"></p><p>可以看到cpu是通过散热片被动散热的，后面用起来时温度总是太高，所以这里又拆开加了一个5V的小风扇辅助散热。</p><p><img src="https://cdn.nafx.top/post_cover/Hi3798Mv100.jpg" alt="散热风扇"></p><h2 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h2><p>这里直接使用神雕(Teasiu)大佬编译好的固件，是一个可以直接使用的支持docker的内核，运行Ubuntu 20.04.4 LTS 服务器系统。</p><p>HiTool海思烧录工具:<a href="https://oss.histb.com/HiTool-windows.7z">https://oss.histb.com/HiTool-windows.7z</a><br>固件下载:<a href="https://dl.ecoo.top:2096/">https://dl.ecoo.top:2096/</a></p><p>下载烧录工具和固件后，通过USB转串口模块连接好板子和计算机，接好12V电源和网线，打开烧录工具，记住要选择好对应的芯片型号，然后选择USB转串口模块对应的串口，选择好烧写的xml文件，选择烧写eMMC后就可以点击烧录了。</p><p><img src="https://cdn.nafx.top/post_cover/3e8f6202bb56899057ed6bfb02f5bfa.png" alt="固件烧录"></p><p>板子重新上电后会自动开始烧录，烧写完成后从路由器中查到板子获取到的IP后就可以通过SSH工具登录。</p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>使用SSH默认账号root密码1234登录。</p><p><img src="https://cdn.nafx.top/post_cover/20220903102301.png" alt="初次登陆"></p><h3 id="1-更新软件"><a href="#1-更新软件" class="headerlink" title="1.更新软件"></a>1.更新软件</h3><p>在做操作之前首先要更新下我们的索引和更新下软件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade </span><br></pre></td></tr></table></figure><p><img src="https://cdn.nafx.top/post_cover/20220903113220.png" alt="更新软件"></p><h3 id="2-修改默认账号密码"><a href="#2-修改默认账号密码" class="headerlink" title="2.修改默认账号密码"></a>2.修改默认账号密码</h3><p>对于初始的默认账户root和ubuntu我们需要更改下它们的密码。</p><p><img src="https://cdn.nafx.top/post_cover/20220903114544.png" alt="修改密码"></p><h3 id="3-配置SSH服务"><a href="#3-配置SSH服务" class="headerlink" title="3.配置SSH服务"></a>3.配置SSH服务</h3><h4 id="a-更改SSH端口"><a href="#a-更改SSH端口" class="headerlink" title="a.更改SSH端口"></a>a.更改SSH端口</h4><p>首先更改掉SSH服务的默认22端口,一般建议把它改成一个大于1024小于65535的整数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nafx.top/post_cover/20220903114933.png" alt="更改SSH端口"></p><h4 id="b-禁止root登录"><a href="#b-禁止root登录" class="headerlink" title="b.禁止root登录"></a>b.禁止root登录</h4><p>同样是修改<code>sshd_config</code>文件，在下方把<code>PermitRootLogin</code>一项参数改为<code>no</code></p><p><img src="https://cdn.nafx.top/post_cover/20220903122044.png" alt="禁止root登录"></p><p>退出并保存后重启ssh服务让变更生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><p>这时不要关闭当前ssh串口，开启另一窗口测试。修改ssh登录的端口这时再用root登录就会提示ssh服务拒绝了密码，我们可以用ubuntu用户登录或者自己使用<code>adduser xxx</code>新建普通用户登录，记得要使用<code>visudo</code>命令赋予新建的用户sudo权限。</p><h4 id="c-启用密钥验证登录并禁止密码登录"><a href="#c-启用密钥验证登录并禁止密码登录" class="headerlink" title="c.启用密钥验证登录并禁止密码登录"></a>c.启用密钥验证登录并禁止密码登录</h4><p>所谓的<code>密钥验证</code>，就是生成<code>一对</code>相关联的密钥文件（公钥和私钥），然后把<code>公钥</code>上传到服务器。每次登录时，SSH 会将<code>公钥</code>和<code>私钥</code>进行匹配，若验证是正确的<code>密钥对</code>，则验证通过。（换言之，你无需记忆和输入复杂的密码，只要保护好<code>私钥</code>这个文件不外泄即可）。</p><p>如果你本地使用的是Linux或者是macOS系统可以在本机通过命令生成密钥对。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;&lt;CLIENT-NAME&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>或者直接通过软件生成再上传到服务器上，这里通过本地ssh工具生成密钥对，然后在服务器创建.ssh文件夹，将公钥保存成名为authorized_keys的文件。</p><p><img src="https://cdn.nafx.top/post_cover/20220903135229.png" alt="保存公钥"></p><p>然后修改<code>.ssh</code>目录权限为700，修改<code>authorized_keys</code>文件权限为 600 （仅所有者可读可写）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nafx.top/post_cover/20220903140459.png" alt="修改权限"></p><p>然后配置ssh文件，搜索PasswordAuthentication（设置是否使用口令验证）选项把参数yes改成no,并将PubkeyAuthentication（用来设置是否开启公钥验证）选项的参数改为yes。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>修改完成后退出并保存，依然需要重启ssh服务让变更生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><p>现在只能通过密钥对来连接上这台服务器了。</p><h3 id="4-设置静态IP地址"><a href="#4-设置静态IP地址" class="headerlink" title="4.设置静态IP地址"></a>4.设置静态IP地址</h3><p>通过修改配置文件设置静态IP地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/network/interfaces.d/eth0</span><br></pre></td></tr></table></figure><p>在<code>address</code>处填入要更改的IP地址，<code>netmask </code>处填掩码一般不变，<code>broadcast</code>广播地址后面的255表示向在本地网络当中所有主机广播，<code>gateway</code>处填入网关路由器的地址，<code>dns-nameservers</code>处可以填些dns地址也可以同样填网关路由器地址使用网关的dns，最后一行处可以修改网口的MAC地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.x</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">broadcast 192.168.1.255</span><br><span class="line">gateway 192.168.1.1</span><br><span class="line">dns-nameservers 192.168.1.1</span><br><span class="line">pre-up ifconfig eth0 hw ether 00:11:22:44:55:66</span><br></pre></td></tr></table></figure><p>修改完成后保存退出，重启让配置立即生效并使用新IP地址连接。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reboot </span><br></pre></td></tr></table></figure><h3 id="5-卸载不需要的预装软件-自选"><a href="#5-卸载不需要的预装软件-自选" class="headerlink" title="5.卸载不需要的预装软件(自选)"></a>5.卸载不需要的预装软件(自选)</h3><p>在用户目录新建一个<code>uninstall.sh</code>脚本文件并输入以下内容，具体需要卸载的工具可以通过注释自行选择。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 正在卸载预装软件</span><br><span class="line"><span class="comment">#PHP</span></span><br><span class="line">systemctl stop php*</span><br><span class="line">sudo apt-get autoremove php* -y</span><br><span class="line">sudo find / -name <span class="string">&quot;*php*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx</span></span><br><span class="line">systemctl stop nginx*</span><br><span class="line">sudo apt-get autoremove nginx* -y</span><br><span class="line">sudo find / -name <span class="string">&quot;*nginx*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line">rm -rf /var/www</span><br><span class="line"></span><br><span class="line"><span class="comment">#Aria2</span></span><br><span class="line">systemctl stop aria*</span><br><span class="line">sudo apt-get autoremove aria2 -y</span><br><span class="line">sudo find / -name <span class="string">&quot;*aria2*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment">#Transmission</span></span><br><span class="line">systemctl stop transmission*</span><br><span class="line">apt-get autoremove transmission* -y</span><br><span class="line">sudo find / -name <span class="string">&quot;*transmission*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment">#页面终端</span></span><br><span class="line">systemctl stop ttyd.service</span><br><span class="line">sudo find / -name <span class="string">&quot;*ttyd*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment">#KMS</span></span><br><span class="line">sudo find / -name <span class="string">&quot;*vlmcsd*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment">#FRP</span></span><br><span class="line">systemctl stop frpc.service</span><br><span class="line">sudo find / -name <span class="string">&quot;*frp*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="comment">#NFS</span></span><br><span class="line">apt-get autoremove nfs* -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#FTP</span></span><br><span class="line">systemctl stop vsftpd</span><br><span class="line">apt-get autoremove vsftpd -y</span><br><span class="line">sudo find / -name <span class="string">&quot;*vsftpd*&quot;</span> |xargs  rm -rf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 预装软件卸载完毕</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 手动关闭6010端口：</span><br><span class="line"><span class="built_in">echo</span> 编辑：vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">netstat -at</span><br></pre></td></tr></table></figure><p>保存退出后<code>sh uninstall.sh</code>运行脚本卸载。</p><h3 id="6-DDNS-解析自动更新（可选）"><a href="#6-DDNS-解析自动更新（可选）" class="headerlink" title="6.DDNS 解析自动更新（可选）"></a>6.DDNS 解析自动更新（可选）</h3><p>默认的ubuntu用户目录下自带阿里域名DDNS解析更新脚本，但首先需要安装nodejs。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure><p>安装完成后修改配置文件<code>vim /home/ubuntu/client-mode/config.json</code>填写你的阿里提供的 keyid 和 keysecret, 并填写你需要解析的域名。</p><p>保存并退出, 然后添加计划任务(每 15 分钟检查一次, 外网 IP 变化才自动更新)<br>输入<code>crontab -e</code>，然后输入<code>*/15 * * * * /home/ubuntu/client-mode/client.sh</code>创建计划任务。</p><h3 id="7-安装WIFI驱动"><a href="#7-安装WIFI驱动" class="headerlink" title="7.安装WIFI驱动"></a>7.安装WIFI驱动</h3><blockquote><p>驱动包下载链接:<a href="https://bbs.histb.com/d/18-wifi">https://bbs.histb.com/d/18-wifi</a></p></blockquote><p>先将下载好的驱动包上传到服务器上，这里上传到推荐目录<code>/tmp</code>下.</p><p><img src="https://cdn.nafx.top/post_cover/20220903181856.png" alt="上传驱动包"></p><p>然后需要安装必须软件Linux内核模块工具kmod。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y kmod</span><br></pre></td></tr></table></figure><h4 id="使用安装脚本自动安装"><a href="#使用安装脚本自动安装" class="headerlink" title="使用安装脚本自动安装"></a>使用安装脚本自动安装</h4><p>和驱动包一起的还有一个安装脚本，可以使用脚本进行安装，首先给脚本可执行权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x wifi_install.sh</span><br></pre></td></tr></table></figure><p>然后在命令行直接输入<code>sh wifi_install.sh -f 驱动包 [参数1] [参数1] ...</code>就可以安装，具体可用参数如下:</p><blockquote><p>   -f, –file<br>                驱动文件包名称 例如 rtl8188ftv.tar.gz<br>    -s, –ssid<br>                可选，wifi名称<br>    -p, –password<br>                可选，wifi密码<br>    -d, –address<br>                可选，固定ip地址 如 192.168.1.100<br>    -g, –gateway<br>                可选，网关 一般为 网段的第一个IP 如 192.168.1.1，<br>    -m, –netmask<br>                可选，掩码 一般为 255.255.255.0<br>例如：<br>sh wifi_install.sh -f rtl8188ftv-0403.tar.gz -s ChineaNet-X231 -p 123456</p></blockquote><p>备注：</p><ul><li>运行命令后会提示“安装成功”，此时驱动安装完成。</li><li>如果使用了 -s 参数，脚本会尝试连接wifi，成功后提示“连接成功”，</li><li>如果填入了 -d 参数，脚本会尝试修改wifi配置，成功后提示“修改地址成功”，</li><li>想修改WIFI配置的话可以使用命令 nmcli connection delete “wifi名字”之后再使用本脚本重新配置，此时可无需使用 -f 参数。</li></ul><h4 id="手动安装WiFi驱动"><a href="#手动安装WiFi驱动" class="headerlink" title="手动安装WiFi驱动"></a>手动安装WiFi驱动</h4><h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><h5 id="1-重新插拔网线后wifi不能使用"><a href="#1-重新插拔网线后wifi不能使用" class="headerlink" title="1.重新插拔网线后wifi不能使用"></a>1.重新插拔网线后wifi不能使用</h5><p>这是因为重新插网线后系统就增加一条优先级更高的默认路由，所有数据都从eth0接口出，导致通过wlan0的地址不能正常访问盒子了，只能手动删除默认的两个路由地址。<br>这里可以写个每次开机自动运行的脚本在每次开机删除默认路由地址。<br>首先创建rc-local.service文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /lib/systemd/system/rc-local.service /etc/systemd/system</span><br></pre></td></tr></table></figure><p>然后修改<code>/etc/systemd/system/rc-local.service</code>，在文件最下方添加:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Install]   </span><br><span class="line">WantedBy=multi-user.target   </span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></table></figure><p>再创建<code>/etc/rc.local</code>里面添加:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `date +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>` begin &gt;&gt; /tmp/ip_route_del.log</span><br><span class="line"></span><br><span class="line">ip route delete 192.168.31.0/24 dev eth0</span><br><span class="line">ip route delete default</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `date +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>` end &gt;&gt; /tmp/ip_route_del.log</span><br><span class="line">ip route delete successfully<span class="string">&quot; &gt;&gt; /tmp/ip_route_del.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit 0</span></span><br></pre></td></tr></table></figure><p>给/etc/rc.local加上可执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><p>最后启动服务让脚本每次开机自动运行，可以使用<code>sudo systemctl status rc-local.service</code>查看当前服务状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start rc-local.service</span><br></pre></td></tr></table></figure><h5 id="2-拔掉网线重新启动后获取不到IP地址"><a href="#2-拔掉网线重新启动后获取不到IP地址" class="headerlink" title="2.拔掉网线重新启动后获取不到IP地址"></a>2.拔掉网线重新启动后获取不到IP地址</h5><p>拔掉网线，重新启动盒子时，盒子的启动速度很慢，通过调试串口查看启动信息后发现，系统启动时卡在如下位置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...a start job is running <span class="keyword">for</span> raise network interfaces...</span><br></pre></td></tr></table></figure><p>查网上相关问题后发现，启动这么慢是因为eth0接口的配置参数默认设置成了auto模式，且是DHCP地址获取方式。导致系统长时间尝试为eth0申请获取IP地址，直到超时。</p><p>解决办法就是为eth0配置静态地址，不从DHCP方式获取地址。</p><h3 id="8-自定义美化"><a href="#8-自定义美化" class="headerlink" title="8.自定义美化"></a>8.自定义美化</h3><h4 id="修改-bashrc"><a href="#修改-bashrc" class="headerlink" title="修改.bashrc"></a>修改.bashrc</h4><p>在家目录<code>.bashrc</code>文件后添加下面命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#md folder_name  ==&gt; mkdit folder_name and cd folder_name</span></span><br><span class="line"><span class="function"><span class="title">md</span></span> () &#123;</span><br><span class="line">    mkdir -p <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash颜色配置</span></span><br><span class="line"><span class="comment">#   颜色代码（字体加背景）：\[\e[F;Bm\]</span></span><br><span class="line"><span class="comment">#   \a ASCII 响铃字符（也可以键入 \007）</span></span><br><span class="line"><span class="comment">#   \e ASCII 转义字符（也可以键入 \033）</span></span><br><span class="line"><span class="comment">#   \d ：#代表日期，格式为weekday month date，例如：&quot;Mon Aug 1&quot;   </span></span><br><span class="line"><span class="comment">#   \u ：#当前用户的账号名称   </span></span><br><span class="line"><span class="comment">#   \H ：#完整的主机名称   </span></span><br><span class="line"><span class="comment">#   \h ：#仅取主机的第一个名字  </span></span><br><span class="line"><span class="comment">#   \t ：#显示时间为24小时格式，如：HH：MM：SS   </span></span><br><span class="line"><span class="comment">#   \T ：#显示时间为12小时格式   </span></span><br><span class="line"><span class="comment">#   \A ：#显示时间为24小时格式：HH：MM   </span></span><br><span class="line"><span class="comment">#   \n 换行符</span></span><br><span class="line"><span class="comment">#   \r 回车符</span></span><br><span class="line"><span class="comment">#   \v ：#BASH的版本信息   </span></span><br><span class="line"><span class="comment">#   \w ：#完整的工作目录名称   </span></span><br><span class="line"><span class="comment">#   \W ：#利用basename取得工作目录名称，所以只会列出最后一个目录   </span></span><br><span class="line"><span class="comment">#   \# ：#下达的第几个命令   </span></span><br><span class="line"><span class="comment">#   \$ ：#提示字符，如果是root时，提示符为：# ，普通用户则为：$ </span></span><br><span class="line"><span class="comment">#   \[\e[m\]：将前景、背景和加粗设置重置为它们的默认值，在在提示行结束时使用这个代码，以使您键入的文字成为非彩色的。</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;\[\e[36m\][\[\e[91m\]\u\[\e[m\]@\[\e[95m\]\h \[\e[34m\]\W\[\e[36m\]]\[\e[32m\]\$\[\e[m\]&#x27;</span></span><br></pre></td></tr></table></figure><p>保存退出后使用<code>sourve .bashrc</code>命令使改动马上生效。</p><h4 id="修改登录信息"><a href="#修改登录信息" class="headerlink" title="修改登录信息"></a>修改登录信息</h4><p>修改或新增<code>/etc/profile.d/</code>下的文件自定义登录信息。</p><p><img src="https://cdn.nafx.top/post_cover/20220903161328.png" alt="登录信息"></p><h2 id="安装外壳"><a href="#安装外壳" class="headerlink" title="安装外壳"></a>安装外壳</h2><p>系统软件配置完成后面还可以安装docker在上面跑一些有意思的东西，这里就可以安装外壳了，由于加装了个散热风扇导致整体高度超出外壳了3、4毫米，这里直接把底壳风扇下方开一个合适大小的洞正好可以增强散热效果，然后脚贴也需要加高一部分适配这个开洞的风扇。</p><p><img src="https://cdn.nafx.top/post_cover/%E9%A3%8E%E6%89%87.jpg" alt="底壳"></p><p>到这里一个巴掌大小的功耗仅有3W左右的小服务器就配置好了，平时可以放在桌上或者机箱上也不会有噪音，而且性能还很不错，美观又实用。</p>]]></content>
      
      
      <categories>
          
          <category> LINUX </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置美化bash和vim</title>
      <link href="/archives/e8e89f2a.html"/>
      <url>/archives/e8e89f2a.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置美化bash和vim"><a href="#配置美化bash和vim" class="headerlink" title="配置美化bash和vim"></a>配置美化bash和vim</h1><p>bash、vim允许你自定义你的终端，自定义的bash、vim可以实现美化效果，还可以提高你在终端的工作效率，下面我备份的配置文件。</p><h2 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h2><p><code>.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.bashrc: executed by bash(1) for non-login shells.</span></span><br><span class="line"><span class="comment"># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</span></span><br><span class="line"><span class="comment"># for examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If not running interactively, don&#x27;t do anything</span></span><br><span class="line">[ -z <span class="string">&quot;<span class="variable">$PS1</span>&quot;</span> ] &amp;&amp; <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># don&#x27;t put duplicate lines in the history. See bash(1) for more options</span></span><br><span class="line"><span class="comment"># ... or force ignoredups and ignorespace</span></span><br><span class="line">HISTCONTROL=ignoredups:ignorespace</span><br><span class="line"></span><br><span class="line"><span class="comment"># append to the history file, don&#x27;t overwrite it</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"></span><br><span class="line"><span class="comment"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span></span><br><span class="line">HISTSIZE=1000</span><br><span class="line">HISTFILESIZE=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the window size after each command and, if necessary,</span></span><br><span class="line"><span class="comment"># update the values of LINES and COLUMNS.</span></span><br><span class="line"><span class="built_in">shopt</span> -s checkwinsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># make less more friendly for non-text input files, see lesspipe(1)</span></span><br><span class="line">[ -x /usr/bin/lesspipe ] &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(SHELL=/bin/sh lesspipe)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set variable identifying the chroot you work in (used in the prompt below)</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$debian_chroot</span>&quot;</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="keyword">then</span></span><br><span class="line">    debian_chroot=$(cat /etc/debian_chroot)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    xterm-color) color_prompt=yes;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span></span><br><span class="line"><span class="comment"># off by default to not distract the user: the focus in a terminal window</span></span><br><span class="line"><span class="comment"># should be on the output of commands, not on the prompt</span></span><br><span class="line"><span class="comment">#force_color_prompt=yes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$force_color_prompt</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span></span><br><span class="line"><span class="comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span></span><br><span class="line"><span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line">color_prompt=yes</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">color_prompt=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$color_prompt</span>&quot;</span> = yes ]; <span class="keyword">then</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> color_prompt force_color_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># If this is an xterm set the title to user@host:dir</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">xterm*|rxvt*)</span><br><span class="line">    PS1=<span class="string">&quot;\[\e]0;<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h: \w\a\]<span class="variable">$PS1</span>&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable color support of ls and also add handy aliases</span></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b)</span>&quot;</span></span><br><span class="line">    <span class="built_in">alias</span> ls=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias dir=&#x27;dir --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias vdir=&#x27;vdir --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># some more ls aliases</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias definitions.</span></span><br><span class="line"><span class="comment"># You may want to put all your additions into a separate file like</span></span><br><span class="line"><span class="comment"># ~/.bash_aliases, instead of adding them here directly.</span></span><br><span class="line"><span class="comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable programmable completion features (you don&#x27;t need to enable</span></span><br><span class="line"><span class="comment"># this, if it&#x27;s already enabled in /etc/bash.bashrc and /etc/profile</span></span><br><span class="line"><span class="comment"># sources /etc/bash.bashrc).</span></span><br><span class="line"><span class="comment">#if [ -f /etc/bash_completion ] &amp;&amp; ! shopt -oq posix; then</span></span><br><span class="line"><span class="comment">#    . /etc/bash_completion</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add for proxy</span></span><br><span class="line"><span class="built_in">export</span> hostip=$(ip route | grep default | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">export</span> hostport=10808</span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    export HTTPS_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    export HTTP_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    export ALL_PROXY=&quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    git config --global http.proxy &quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    git config --global https.proxy &quot;socks5://$&#123;hostip&#125;:$&#123;hostport&#125;&quot;;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::http::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;hostport&#125;\&quot;; &quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::https::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;hostport&#125;\&quot;; &quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    unset HTTPS_PROXY;</span></span><br><span class="line"><span class="string">    unset HTTP_PROXY;</span></span><br><span class="line"><span class="string">    unset ALL_PROXY;</span></span><br><span class="line"><span class="string">    git config --global --unset  http.proxy;</span></span><br><span class="line"><span class="string">    git config --global --unset  https.proxy;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &#x27;</span>/Acquire::http::Proxy/d<span class="string">&#x27; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &#x27;</span>/Acquire::https::Proxy/d<span class="string">&#x27; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#md folder_name  ==&gt; mkdit folder_name and cd folder_name</span></span><br><span class="line"><span class="function"><span class="title">md</span></span> () &#123;</span><br><span class="line">    mkdir -p <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># bash颜色配置</span></span><br><span class="line"><span class="comment">#   颜色代码（字体加背景）：\[\e[F;Bm\]</span></span><br><span class="line"><span class="comment">#   \a ASCII 响铃字符（也可以键入 \007）</span></span><br><span class="line"><span class="comment">#   \e ASCII 转义字符（也可以键入 \033）</span></span><br><span class="line"><span class="comment">#   \d ：#代表日期，格式为weekday month date，例如：&quot;Mon Aug 1&quot;   </span></span><br><span class="line"><span class="comment">#   \u ：#当前用户的账号名称   </span></span><br><span class="line"><span class="comment">#   \H ：#完整的主机名称   </span></span><br><span class="line"><span class="comment">#   \h ：#仅取主机的第一个名字  </span></span><br><span class="line"><span class="comment">#   \t ：#显示时间为24小时格式，如：HH：MM：SS   </span></span><br><span class="line"><span class="comment">#   \T ：#显示时间为12小时格式   </span></span><br><span class="line"><span class="comment">#   \A ：#显示时间为24小时格式：HH：MM   </span></span><br><span class="line"><span class="comment">#   \n 换行符</span></span><br><span class="line"><span class="comment">#   \r 回车符</span></span><br><span class="line"><span class="comment">#   \v ：#BASH的版本信息   </span></span><br><span class="line"><span class="comment">#   \w ：#完整的工作目录名称   </span></span><br><span class="line"><span class="comment">#   \W ：#利用basename取得工作目录名称，所以只会列出最后一个目录   </span></span><br><span class="line"><span class="comment">#   \# ：#下达的第几个命令   </span></span><br><span class="line"><span class="comment">#   \$ ：#提示字符，如果是root时，提示符为：# ，普通用户则为：$ </span></span><br><span class="line"><span class="comment">#   \[\e[m\]：将前景、背景和加粗设置重置为它们的默认值，在在提示行结束时使用这个代码，以使您键入的文字成为非彩色的。</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;\[\e[36m\][\[\e[91m\]\u\[\e[m\]@\[\e[95m\]\h \[\e[34m\]\W\[\e[36m\]]\[\e[32m\]\$\[\e[m\]&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p><code>.vimrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible    <span class="string">&quot; 去掉对vi的兼容，让vim运行在完全模式下&quot;</span></span><br><span class="line">filetype on                     <span class="string">&quot; 开启文件类型检测&quot;</span></span><br><span class="line">filetype plugin on              <span class="string">&quot; 开启插件的支持&quot;</span></span><br><span class="line">filetype indent on              <span class="string">&quot; 开启文件类型相应的缩进规则&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line"></span><br><span class="line">Plugin <span class="string">&#x27;ycm-core/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="string">&quot; YouCompleteMe:语句补全插件 &quot;</span></span><br><span class="line"><span class="built_in">set</span> runtimepath+=~/.vim/bundle/YouCompleteMe</span><br><span class="line">autocmd InsertLeave * <span class="keyword">if</span> pumvisible() == 0|pclose|endif <span class="string">&quot;离开插入模式后自动关闭预览窗口&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_collect_identifiers_from_tags_files = 1           <span class="string">&quot; 开启 YCM基于标签引擎&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_collect_identifiers_from_comments_and_strings = 1 <span class="string">&quot; 注释与字符串中的内容也用于补全&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:syntastic_ignore_files=[<span class="string">&quot;.*\.py$&quot;</span>]</span><br><span class="line"><span class="built_in">let</span> g:ycm_seed_identifiers_with_syntax = 1                  <span class="string">&quot; 语法关键字补全&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_complete_in_comments = 1</span><br><span class="line"><span class="built_in">let</span> g:ycm_confirm_extra_conf = 0                            <span class="string">&quot; 关闭加载.ycm_extra_conf.py提示&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_key_list_select_completion = [<span class="string">&#x27;&lt;c-n&gt;&#x27;</span>, <span class="string">&#x27;&lt;Down&gt;&#x27;</span>]  <span class="string">&quot; 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_key_list_previous_completion = [<span class="string">&#x27;&lt;c-p&gt;&#x27;</span>, <span class="string">&#x27;&lt;Up&gt;&#x27;</span>]</span><br><span class="line"><span class="built_in">let</span> g:ycm_complete_in_comments = 1                          <span class="string">&quot; 在注释输入中也能补全&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_complete_in_strings = 1                           <span class="string">&quot; 在字符串输入中也能补全&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_collect_identifiers_from_comments_and_strings = 1 <span class="string">&quot; 注释和字符串中的文字也会被收入补全&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf=<span class="string">&#x27;~/.ycm_extra_conf.py&#x27;</span>      <span class="string">&quot;&#x27;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&#x27;&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_show_diagnostics_ui = 0                           <span class="string">&quot; 禁用语法检查&quot;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? <span class="string">&quot;\&lt;C-y&gt;&quot;</span> : <span class="string">&quot;\&lt;CR&gt;&quot;</span>             <span class="string">&quot; 回车即选中当前项&quot;</span></span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;     <span class="string">&quot; 跳转到定义处&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_min_num_of_chars_for_completion=2                 <span class="string">&quot; 从第2个键入字符就开始罗列匹配项&quot;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plugin &#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="string">Plugin &#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>vim-airline配置:优化vim界面<span class="string">&quot;</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="string">&quot;</span> airline设置<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span> 显示颜色<span class="string">&quot;</span></span><br><span class="line"><span class="string">set t_Co=256</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string">let g:airline_theme=&#x27;bubblegum&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> 使用powerline打过补丁的字体<span class="string">&quot;</span></span><br><span class="line"><span class="string">let g:airline_powerline_fonts = 1</span></span><br><span class="line"><span class="string">&quot;</span> 开启tabline<span class="string">&quot;</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#enabled = 1</span></span><br><span class="line"><span class="string">&quot;</span> tabline中当前buffer两端的分隔字符<span class="string">&quot;</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#left_sep = &#x27; &#x27;</span></span><br><span class="line"><span class="string">&quot;</span> tabline中未激活buffer两端的分隔字符<span class="string">&quot;</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#left_alt_sep = &#x27; &#x27;</span></span><br><span class="line"><span class="string">&quot;</span> tabline中buffer显示编号<span class="string">&quot;</span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#buffer_nr_show = 1</span></span><br><span class="line"><span class="string">&quot;</span> 映射切换buffer的键位<span class="string">&quot;</span></span><br><span class="line"><span class="string">nnoremap [b :bp&lt;CR&gt;</span></span><br><span class="line"><span class="string">nnoremap ]b :bn&lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 映射&lt;leader&gt;num到num buffer<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;1 :b 1&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;2 :b 2&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;3 :b 3&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;4 :b 4&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;5 :b 5&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;6 :b 6&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;7 :b 7&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;8 :b 8&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;9 :b 9&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> vim-scripts 中的插件 <span class="string">&quot;</span></span><br><span class="line"><span class="string">Plugin &#x27;taglist.vim&#x27;</span></span><br><span class="line"><span class="string">Plugin &#x27;The-NERD-tree&#x27;</span></span><br><span class="line"><span class="string">Plugin &#x27;indentLine.vim&#x27;  &quot;</span>缩进线插件<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> Plugin <span class="string">&#x27;git://git.wincent.com/command-t.git&#x27;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call vundle#end()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>键盘命令<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">let mapleader = &quot;</span>\&lt;space&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;w :w!&lt;cr&gt; &quot;</span>&lt;space&gt;w强制保存文件<span class="string">&quot;</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;q :q!&lt;cr&gt; &quot;</span>&lt;space&gt;q强制退出文件<span class="string">&quot;</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;s :wq!&lt;cr&gt; &quot;</span>&lt;space&gt;s强制保存退出文件<span class="string">&quot;</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;f :find&lt;cr&gt; &quot;</span>&lt;space&gt;find查找<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>Alt+Up/Down向上下移动代码<span class="string">&quot;</span></span><br><span class="line"><span class="string">nnoremap &lt;A-Down&gt; :m+&lt;CR&gt;==</span></span><br><span class="line"><span class="string">nnoremap &lt;A-Up&gt; :m-2&lt;CR&gt;==</span></span><br><span class="line"><span class="string">inoremap &lt;A-Down&gt; &lt;Esc&gt;:m+&lt;CR&gt;==gi</span></span><br><span class="line"><span class="string">inoremap &lt;A-Up&gt; &lt;Esc&gt;:m-2&lt;CR&gt;==gi</span></span><br><span class="line"><span class="string">vnoremap &lt;A-Down&gt; :m&#x27;&gt;+&lt;CR&gt;gv=gv</span></span><br><span class="line"><span class="string">vnoremap &lt;A-Up&gt; :m-2&lt;CR&gt;gv=gv</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">nnoremap &lt;S-Down&gt; :t.&lt;CR&gt;$</span></span><br><span class="line"><span class="string">nnoremap &lt;S-Up&gt; yykp$</span></span><br><span class="line"><span class="string">inoremap &lt;A-S-Down&gt; &lt;Esc&gt;:t.&lt;CR&gt;$</span></span><br><span class="line"><span class="string">inoremap &lt;A-S-Up&gt; &lt;Esc&gt;yykp$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 映射全选+复制 ctrl+a<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;C-A&gt; ggVGY</span></span><br><span class="line"><span class="string">map! &lt;C-A&gt; &lt;Esc&gt;ggVGY</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>新建标签<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;C-n&gt; :tabnew&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 选中状态下 Ctrl+c 复制<span class="string">&quot; </span></span><br><span class="line"><span class="string">vnoremap &lt;C-c&gt; &quot;</span>+y   <span class="string">&quot;支持在Visual模式下，通过C-y复制到系统剪切板</span></span><br><span class="line"><span class="string">nnoremap &lt;C-p&gt; &quot;</span>*p   <span class="string">&quot;支持在normal模式下，通过C-p粘贴系统剪切板</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>NERDTree 配置:F2快捷键显示当前目录树<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">let NERDTreeWinSize=25 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F3&gt; :TlistToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">let Tlist_Use_Right_Window=1</span></span><br><span class="line"><span class="string">let Tlist_Show_One_File=1</span></span><br><span class="line"><span class="string">let Tlist_Exit_OnlyWindow=1</span></span><br><span class="line"><span class="string">let Tlist_WinWidt=25</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>c，c++ 按f5编译运行<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;</span></span><br><span class="line"><span class="string">func! CompileRunGcc()</span></span><br><span class="line"><span class="string">    exec &quot;</span>w<span class="string">&quot;</span></span><br><span class="line"><span class="string">    if &amp;filetype == &#x27;c&#x27;</span></span><br><span class="line"><span class="string">        exec &quot;</span>!g++ % -o %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">        exec &quot;</span>! ./%&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == &#x27;cpp&#x27;</span></span><br><span class="line"><span class="string">        exec &quot;</span>!g++ % -o %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">        exec &quot;</span>! ./%&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == &#x27;java&#x27; </span></span><br><span class="line"><span class="string">        exec &quot;</span>!javac %<span class="string">&quot; </span></span><br><span class="line"><span class="string">        exec &quot;</span>!java %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == &#x27;sh&#x27;</span></span><br><span class="line"><span class="string">        :!./%</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>F8 c,c++的调试<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F8&gt; :call Rungdb()&lt;CR&gt;</span></span><br><span class="line"><span class="string">func! Rungdb()</span></span><br><span class="line"><span class="string">    exec &quot;</span>w<span class="string">&quot;</span></span><br><span class="line"><span class="string">    exec &quot;</span>!g++ % -g -o %&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">    exec &quot;</span>!gdb ./%&lt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">endfunc </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>F12智能缩进<span class="string">&quot;</span></span><br><span class="line"><span class="string">map &lt;F12&gt; gg=G</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>mf生成main函数<span class="string">&quot;</span></span><br><span class="line"><span class="string">map mf i#include &quot;</span>stdio.h<span class="string">&quot;&lt;Enter&gt;&lt;Enter&gt;int main(int argc, char *argv[])&lt;Esc&gt;o&#123;&lt;Esc&gt;oreturn 0;&lt;Esc&gt;o&#125;&lt;Esc&gt;2ko</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;实用设置&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> encoding</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8              <span class="string">&quot; 打开文件时编码格式&quot;</span></span><br><span class="line"><span class="built_in">set</span> fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1         <span class="string">&quot;vim会根据该设置识别文件编码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> nu      <span class="string">&quot; 显示行号&quot;</span></span><br><span class="line"><span class="built_in">set</span> ruler                   <span class="string">&quot; 显示当前光标行号和列&quot;</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">history</span>=2000            <span class="string">&quot; 记录 Vim 历史操作的条数&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> autoread                <span class="string">&quot; 文件在vim外修改过自动重新载入&quot;</span></span><br><span class="line">au CursorHold,CursorHoldI * checktime</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> t_Co=256    <span class="string">&quot; 开启256色&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> background=light</span><br><span class="line">colorscheme desert    </span><br><span class="line"><span class="string">&quot; 颜色主题&quot;</span></span><br><span class="line"></span><br><span class="line">syntax on   <span class="string">&quot; 语法高亮&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> cursorline  <span class="string">&quot; 突出显示当前行&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> tabstop=4   <span class="string">&quot; Tab键的宽度&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> smarttab    <span class="string">&quot; 在行和段开始处使用制表符&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;  统一缩进为4&quot;</span></span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> autoindent  <span class="string">&quot; 自动对齐&quot;</span></span><br><span class="line"><span class="built_in">set</span> cindent     <span class="string">&quot; 自动缩进&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> showmatch   <span class="string">&quot; 高亮显示对应的括号&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; search&quot;</span></span><br><span class="line"><span class="built_in">set</span> smartcase   <span class="string">&quot;搜索时 如果输入大写，则严格按照大小写搜索，如果小写，并设置了ignorecase，则忽略大小写&quot;</span></span><br><span class="line"><span class="built_in">set</span> ignorecase  <span class="string">&quot;搜索忽略大小写&quot;</span></span><br><span class="line"><span class="built_in">set</span> incsearch   <span class="string">&quot;搜索时及时匹配搜索内容，需要回车确认&quot;</span></span><br><span class="line"><span class="built_in">set</span> hlsearch    <span class="string">&quot;高亮搜索项&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> confirm     <span class="string">&quot; 在处理未保存或只读文件的时候，弹出确认&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> noeb        <span class="string">&quot; 去掉输入错误的提示声音&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 开始折叠 &quot;</span></span><br><span class="line"><span class="built_in">set</span> foldcolumn=0</span><br><span class="line"><span class="built_in">set</span> foldmethod=indent </span><br><span class="line"><span class="built_in">set</span> foldlevel=3 </span><br><span class="line"><span class="built_in">set</span> foldenable              </span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位） &quot;</span></span><br><span class="line"><span class="built_in">set</span> mouse=a</span><br><span class="line"><span class="built_in">set</span> selection=exclusive</span><br><span class="line"><span class="built_in">set</span> selectmode=mouse,key</span><br><span class="line"></span><br><span class="line">filetype plugin indent on</span><br><span class="line"><span class="string">&quot; 分为三部分命令：file on, file plugin on, file indent on.分别表示自动识别文件类型，用文件类型脚本，使用缩进定义文件。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> completeopt=preview,menu <span class="string">&quot;代码补全 &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; R键编译 Compile function&quot;</span></span><br><span class="line">noremap r :call CompileRunGcc()&lt;CR&gt;</span><br><span class="line"><span class="keyword">function</span>! CompileRunGcc()</span><br><span class="line">  execute <span class="string">&quot;w&quot;</span></span><br><span class="line">  <span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;c&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> !isdirectory(<span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">      execute <span class="string">&quot;!mkdir build&quot;</span></span><br><span class="line">    endif</span><br><span class="line">    execute <span class="string">&quot;!gcc % -o build/%&lt;&quot;</span></span><br><span class="line">    execute <span class="string">&quot;!time ./build/%&lt;&quot;</span></span><br><span class="line">  endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
            <tag> bash </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL更换镜像源</title>
      <link href="/archives/48884a62.html"/>
      <url>/archives/48884a62.html</url>
      
        <content type="html"><![CDATA[<h1 id="WSL更换清华镜像源"><a href="#WSL更换清华镜像源" class="headerlink" title="WSL更换清华镜像源"></a>WSL更换清华镜像源</h1><p>Ubuntu、Python、Nodejs、MySQL、Git、Chromium、Docker、Homebrew 等一系列的常用开源系统、软件都是国外开发的，下载地址位于国外，从国内访问、下载、更新速度慢所以我们要使用镜像源，其中清华源镜像镜像源数量最多，所以这里用清华源镜像做替换，下面是替换方法：</p><ol><li>备份原文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp  /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><ol start="2"><li>将<code>/etc/apt/sources.list</code>文件内容替换为清华镜像源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><ol start="3"><li>更新软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用WSL+VScode搭建C/C++开发环境</title>
      <link href="/archives/d3d975f8.html"/>
      <url>/archives/d3d975f8.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用WSL-VScode搭建C-C-开发环境"><a href="#使用WSL-VScode搭建C-C-开发环境" class="headerlink" title="使用WSL+VScode搭建C/C++开发环境"></a>使用WSL+VScode搭建C/C++开发环境</h1><div class="note info flat"><p>参考文档：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/setup/environment">https://docs.microsoft.com/zh-cn/windows/wsl/setup/environment</a></p></div><h2 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h2><h3 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h3><p>对于最新版本的 Windows （内部版本 20262+）可以使用简化的 –install 命令安装WSL。若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-install</span></span><br></pre></td></tr></table></figure><p>–install 命令执行以下操作：</p><ul><li>启用可选的 WSL 和虚拟机平台组件</li><li>下载并安装最新 Linux 内核</li><li>将 WSL 2 设置为默认值</li><li>下载并安装 Ubuntu Linux 发行版（可能需要重新启动）</li></ul><p>在此安装过程中，你将需要重启计算机。</p><h3 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h3><p>若要更新到 WSL 2，需要运行 Windows 10。<br>对于 x64 系统：版本 1903 或更高版本，采用内部版本 18362 或更高版本。<br>对于 ARM64 系统：版本 2004 或更高版本，采用内部版本 19041 或更高版本。<br>低于 18362 的版本不支持 WSL 2。 使用 Windows Update 助手更新 Windows 版本。</p><p>如不是最新版本可以以管理员身份运行powershell，按以下步骤安装：</p><h4 id="1-启用-Windows-Subsystem-Linux子系统"><a href="#1-启用-Windows-Subsystem-Linux子系统" class="headerlink" title="1.启用 Windows-Subsystem-Linux子系统"></a>1.启用 Windows-Subsystem-Linux子系统</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart   </span><br></pre></td></tr></table></figure><h4 id="2-开启虚拟机功能"><a href="#2-开启虚拟机功能" class="headerlink" title="2.开启虚拟机功能"></a>2.开启虚拟机功能</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart </span><br></pre></td></tr></table></figure><h4 id="3-重启后下载安装Linux内核更新包"><a href="#3-重启后下载安装Linux内核更新包" class="headerlink" title="3.重启后下载安装Linux内核更新包"></a>3.重启后下载安装Linux内核更新包</h4><p>下载地址： <a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></p><h4 id="4-将wsl2设为默认版本"><a href="#4-将wsl2设为默认版本" class="headerlink" title="4.将wsl2设为默认版本"></a>4.将wsl2设为默认版本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="5-自己选择安装Linux发行版"><a href="#5-自己选择安装Linux发行版" class="headerlink" title="5.自己选择安装Linux发行版"></a>5.自己选择安装Linux发行版</h4><p>打开 <a href="https://www.microsoft.com/store/apps/9n6svws3rx71">Microsoft Store</a>，并选择你偏好的 Linux 分发版。</p><h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><p>安装完成后打开WSL的shell</p><h3 id="1-更新ubuntu软件"><a href="#1-更新ubuntu软件" class="headerlink" title="1.更新ubuntu软件"></a>1.更新ubuntu软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="2-安装编译器调试器"><a href="#2-安装编译器调试器" class="headerlink" title="2.安装编译器调试器"></a>2.安装编译器调试器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install gcc g++ gdb</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/10/KR7aLrdD4tZkjUf.png"></p><h3 id="3-在VScode中安装wsl插件"><a href="#3-在VScode中安装wsl插件" class="headerlink" title="3.在VScode中安装wsl插件"></a>3.在VScode中安装wsl插件</h3><p>在子系统shell中输入<code>code .</code>就可以打开VScode，第一次从子系统打开VS Code会自动安装一些插件，等待安装完成后就可以在WSL中进行开发了。</p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cxxx（深入理解计算机系统第七章02）</title>
      <link href="/archives/6b113d09.html"/>
      <url>/archives/6b113d09.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> CSAPP </category>
          
          <category> 第七章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C可执行文件生成过程概述（深入理解计算机系统第七章01）</title>
      <link href="/archives/7f68ed10.html"/>
      <url>/archives/7f68ed10.html</url>
      
        <content type="html"><![CDATA[<h2 id="C可执行文件生成过程概述（深入理解计算机系统第七章01）"><a href="#C可执行文件生成过程概述（深入理解计算机系统第七章01）" class="headerlink" title="C可执行文件生成过程概述（深入理解计算机系统第七章01）"></a>C可执行文件生成过程概述（深入理解计算机系统第七章01）</h2><blockquote><p>视频教程：<br><a href="https://www.bilibili.com/video/BV1kE411X7S5">南京大学 计算机系统基础 袁春风老师</a><br><a href="https://www.bilibili.com/video/BV1X34y1o7zq">CSAPP-深入理解计算机系统 九曲阑干</a></p></blockquote><p>我一直有这样一个疑问，每当我在编辑器中写下一行行代码，完成一个又一个程序时，写好的<code>.c</code>文件里其实都是写满了使用特定编码(ASCII、UTF-8、GBK等等)的字符，电脑或运行程序的机器是如何转化为一个可执行文件的呢？</p><p><img src="http://cdn.nafx.top/post_cover/20220824170053.png" alt="gcc生成可执行文件"></p><p>以一个HelloWorld程序为例，在Linux系统中可以通过图中的gcc命令生成可执行文件，这实际上经历了下面几个过程，这里把整个过程分解采用手动链接的方式生成可执行程序。</p><p><img src="http://cdn.nafx.top/post_cover/6539f58189a6cfef1e659c5c682417e2.jpg" alt="gcc命令生成可执行文件过程"></p><blockquote><p>gcc命令实际上是具体程序(如ccp、cc1、as等)的包装命令,<br>用户通过gcc命令来使用具体的预处理程序cpp、编译程序cc1和汇编程序as等。</p></blockquote><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>首先是将<code>.c</code>文件通过预处理程序（c preprocessor）<code>cpp</code>生成预处理程序<code>hello.i</code>（通常以<code>.i</code>扩展名结尾），经过预处理后的文件还是一个可读的高级语言源程序文本文件，只不过不包含任何宏定义，为后续编译做准备。</p><p><img src="http://cdn.nafx.top/post_cover/20220827145644.png" alt="预处理命令"></p><p>这里直接使用<code>cpp</code>预处理器，也可以使用<code>gcc -E -o hello.i  hello.c</code>命令进行预处理，<code>-E</code>参数表示只激活预处理。我们可以看下生成的<code>hello.i</code>文件有733行。</p><p><img src="http://cdn.nafx.top/post_cover/20220827151615.png" alt="预处理文件行数"></p><p>实际上预处理过程只是处理了源文件中以<code>#</code>开头的预编译指令，包括：</p><ul><li>删除<code>#define</code>并展开所定义的宏。</li><li>处理所有条件预编译指令，如<code>#if</code>、<code>#ifdef</code>、<code>#endif</code>等。</li><li>插入头文件到<code>#include</code>处，可以递归方式进行处理。</li><li>删除所有的注释<code>//</code>和<code>/* */</code>。</li><li>添加行号和文件名标识，以便编译时编译器产生调试用的行号信息。</li><li>保留所有#pragma编译指令（编译器需要用）。</li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>下面进行编译，将<code>.i</code>文件通过编译程序（编译器）<code>cc1</code>编译生成汇编语言程序<code>hello.s</code>文件（通常以<code>.s</code>扩展名结尾），经过编译后的文件依然是可读的文本文件，只不过内容已经编译成了对应的汇编语言源程序。</p><p><img src="http://cdn.nafx.top/post_cover/20220827153119.png" alt="编译命令"></p><p>这里使用c编译器（c compiler）<code>cc</code>，同样也可以使用<code>gcc -S -o hello.s hello.i</code>命令编译，<code>-S</code>参数表示只激活预处理和编译，因为编译后生成的依旧是文本文件我们可以直接打开查看。</p><p><img src="http://cdn.nafx.top/post_cover/20220827153559.png" alt="编译后.s文件"></p><p>可以看到经过编译的词法分析、语法分析、语义分析并优化后我们的C语言程序代码已经变成了由汇编指令构成的汇编代码文件，由于还是文本文件计算机依旧不能理解和执行它。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>下一步就是将<code>.s</code>文件通过汇编程序（汇编器）<code>as</code>进行汇编，也就是将汇编语言源程序转换为机器语言序列，生成可重定位目标文件<code>hello.o</code>，这个文件里就是由二进制的机器指令代码，计算机可以直接识别。汇编指令和机器指令一一对应，前者是后者的符号表示，它们都属于机器级指令，所构成的程序成为机器级代码。</p><p><img src="http://cdn.nafx.top/post_cover/20220827154421.png" alt="汇编命令"></p><p>这里使用汇编器（assembler）<code>as</code>，同样可以使用<code>gcc -c -o hello.o hello.s</code> 命令汇编，<code>-c</code>参数表示只激活预处理,编译,和汇编。汇编结果是可重定位目标文件，其中包含的是不可读的二进制代码，无法被当做普通文本文件打开，只能用相应的工具软件来查看其内容。</p><p>比如可以用<code>objdump -S</code>命令反汇编查看我们的目标文件包含的指令和数据。可以看到代码和数据的地址都是从0开始，因为可重定位目标文件还不清楚每个符号实际的地址，下面链接的重定位过程会计算每个定义的符号在虚拟地址空间的绝对地址并将可执行文件中的符号引用处的地址修改为重定位后的地址信息。</p><p><img src="http://cdn.nafx.top/post_cover/20220827190154.png" alt="反汇编查看"></p><p>汇编生成的可重定位目标文件或是链接后生成的可执行目标文件都是ELF (Executable and Linkable Format)格式的文件，可以使用<code>readelf -a</code>命令查看包括ELF头(ELF header)、程序头表(Program header table)和节头表(Section header table)的目标文件详细信息。</p><p><img src="http://cdn.nafx.top/post_cover/20220827193010.png" alt="readelf查看"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>一个程序可能会包含许多其他模块，也会使用到一些库，如这里使用到的<code>printf</code>函数就是定义在标准库<code>libc</code>中定义的。通过链接器<code>ld</code>将多个可重定位目标文件通过符号解析（symbol resolution)和重定位(relocation)合并以生成可执行目标程序，可执行目标文件程序也是由机器可以直接识别执行的二进制代码构成的。</p><p>当我们手动调用链接器<code>ld</code>来构造可执行程序时，除了需要用到汇编阶段得到的<code>hello.o</code>之外还需要加上crt库和crt入口等参数。</p><p><img src="http://cdn.nafx.top/post_cover/20220827164200.png" alt="ld参数"></p><p>所以这里我们直接使用<code>gcc</code>命令来自动链接我们的可重定位目标文件<code>hello.o</code>。<br><code>-static</code>参数表示静态链接，如不指定则默认动态链接。<br><code>-o</code>参数指定目标名称，如不指定则默认为<code>a.out</code>。</p><p><img src="http://cdn.nafx.top/post_cover/20220827164358.png" alt="链接命令"><br>连接操作得到的就是可执行目标文件。<br>链接过程的本质就是合并相同的“节”（session）到虚拟地址空间。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>最后确认得到的可执行目标文件prog是否能正确运行。</p><p><img src="http://cdn.nafx.top/post_cover/20220827184644.png" alt="运行"></p><p>通过shell调用操作系统中的加载器（loader）函数，将可执行目标文件中的代码和数据复制到内存中然后将CPU的控制权转移到prog程序的开头。这里只测试生成的可执行程序是否正常运行，关于可执行目标文件的加载和运行后面再详细说明。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> CSAPP </category>
          
          <category> 第七章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32启动文件详解</title>
      <link href="/archives/c1ce48e1.html"/>
      <url>/archives/c1ce48e1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 启动文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蜂鸣器播放超级马里奥（STM32HAL库）</title>
      <link href="/archives/c8bc38b7.html"/>
      <url>/archives/c8bc38b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="蜂鸣器播放超级马里奥（STM32HAL库）"><a href="#蜂鸣器播放超级马里奥（STM32HAL库）" class="headerlink" title="蜂鸣器播放超级马里奥（STM32HAL库）"></a>蜂鸣器播放超级马里奥（STM32HAL库）</h1><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><h3 id="1-无源蜂鸣器原理"><a href="#1-无源蜂鸣器原理" class="headerlink" title="1.无源蜂鸣器原理"></a>1.无源蜂鸣器原理</h3><p>蜂鸣器按驱动方式可分为有源蜂鸣器（内含驱动线路）和无源蜂鸣器（外部驱动）（“源”指的是激励源）。有源蜂鸣器虽加电源就可以发出声音但频率相对固定，这里使用的是无源蜂鸣器，无源蜂鸣器利用电磁感应现象，为音圈接入交变电流后形成的电磁铁与永磁铁相吸或相斥而推动振膜发声，接入直流电只能持续推动振膜而无法产生声音，只能在接通或断开时产生声音。</p><p><img src="https://s2.loli.net/2022/07/10/WOXjlsmMY3H785g.png" alt="蜂鸣器部分原理图">  </p><h3 id="2-频率音调对照表"><a href="#2-频率音调对照表" class="headerlink" title="2.频率音调对照表"></a>2.频率音调对照表</h3><p>所以只需要将无源蜂鸣器接入电路中并用单片机控制引脚给它一定频率的方波信号就可以产生不同音调，再用延时加以节奏就可以用蜂鸣器模拟曲调实现音乐效果了。 </p><p><img src="https://s2.loli.net/2022/08/15/41aSPR9oK2kXtOJ.jpg" alt="频率音调对照表">  </p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h3 id="1-播放单个音调"><a href="#1-播放单个音调" class="headerlink" title="1.播放单个音调"></a>1.播放单个音调</h3><h4 id="音调"><a href="#音调" class="headerlink" title="音调"></a>音调</h4><p>函数第一个参数hz控制声音音调，本质是在循环中控制高低电平时间及占比即可控制音调，比如要播放中音1这个音调，该音调频率为523Hz也就是每个电平变化周期是1/523s==&gt;1000000/523us，让其中高低电平各占一半，即输出低电平后延时500000/523us再输出低电平，后再延时500000/523us再输出高电平。</p><h4 id="持续时间"><a href="#持续时间" class="headerlink" title="持续时间"></a>持续时间</h4><p>函数第二个参数time控制音调时间，本质是控制循环的次数，如播放523Hz音调电平每秒需要切换523次，那100ms需要切换的次数就为523*100/1000次。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Beep</span><span class="params">(<span class="keyword">uint16_t</span> hz,<span class="keyword">uint16_t</span> time)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint16_t</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;hz*time/<span class="number">1000</span>; i++)&#123;<span class="comment">//循环次数决定单音的时长</span></span><br><span class="line">       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_RESET); <span class="comment">//蜂鸣器接口输出低电平</span></span><br><span class="line">       delay_us(<span class="number">500000</span>/hz); <span class="comment">//延时</span></span><br><span class="line">       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_SET); <span class="comment">//蜂鸣器接口输出高电平</span></span><br><span class="line">       delay_us(<span class="number">500000</span>/hz); <span class="comment">//延时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-播放整首"><a href="#2-播放整首" class="headerlink" title="2.播放整首"></a>2.播放整首</h3><p>有了控制蜂鸣器播放单个音调的函数之后，想要播放整首歌就很简单了，只需要找到该歌曲的简谱，根据音符填入对应的频率即可。这里我们把频率都写入一个数组中，方便程序遍历。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint16_t</span> mario[] = &#123;<span class="number">659</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">45</span>, <span class="number">523</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>, <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">466</span>, <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>,<span class="number">659</span>, <span class="number">784</span>,</span><br><span class="line">    <span class="number">880</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">494</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>,</span><br><span class="line">    <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">466</span>, <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">740</span>, <span class="number">622</span>, <span class="number">659</span>, <span class="number">523</span>,</span><br><span class="line">    <span class="number">587</span>, <span class="number">392</span>, <span class="number">440</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">740</span>, <span class="number">622</span>, <span class="number">659</span>, <span class="number">523</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">1046</span>, <span class="number">15</span>, <span class="number">1046</span>, <span class="number">1046</span>, <span class="number">30</span>, <span class="number">784</span>, <span class="number">740</span>, <span class="number">622</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">392</span>, <span class="number">440</span>,</span><br><span class="line">    <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">622</span>, <span class="number">30</span>, <span class="number">587</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">392</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">392</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">392</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">523</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">523</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">659</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">523</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>, <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">466</span>, <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">523</span>, <span class="number">587</span>, <span class="number">494</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>, <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">466</span>,</span><br><span class="line">    <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>,</span><br><span class="line">    <span class="number">494</span>, <span class="number">30</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">415</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">698</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">698</span>, <span class="number">30</span>,</span><br><span class="line">    <span class="number">494</span>, <span class="number">880</span>, <span class="number">15</span>, <span class="number">880</span>, <span class="number">5</span>, <span class="number">880</span>, <span class="number">5</span>, <span class="number">784</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">392</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">415</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">698</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">698</span>, <span class="number">30</span>, <span class="number">494</span>,</span><br><span class="line">    <span class="number">698</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">5</span>, <span class="number">659</span>, <span class="number">5</span>, <span class="number">587</span>, <span class="number">523</span>, <span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure><p>剩下就只需要在播放函数中遍历此数组就好了，其中<code>ARRAY_SIZE(song)</code>是一个计算数组大小的函数宏，方便播放不同歌曲。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MIDI_PLAY</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint16_t</span> hz = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ARRAY_SIZE(song); i++)&#123;</span><br><span class="line">hz = song[i];</span><br><span class="line"><span class="keyword">if</span>(hz &lt; <span class="number">50</span>)</span><br><span class="line">HAL_Delay(hz*<span class="number">10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    Beep(hz, <span class="number">160</span>);</span><br><span class="line">HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在数组中加入了一些小于50的数作为节奏上的暂停，if语句判断如果如果小于50就延时该数值*10ms，还需要自己根据歌曲速度给<code>Beep</code>函数设定合适的音调时间。</p><h2 id="完整驱动代码"><a href="#完整驱动代码" class="headerlink" title="完整驱动代码"></a>完整驱动代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buzzer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAY_SIZE(a) ((sizeof a)/(sizeof a[0]))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> song mario</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Beep</span><span class="params">(<span class="keyword">uint16_t</span> hz,<span class="keyword">uint16_t</span> time)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint16_t</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;hz*time/<span class="number">1000</span>; i++)&#123;<span class="comment">//循环次数决定单音的时长</span></span><br><span class="line">       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_RESET); <span class="comment">//蜂鸣器接口输出低电平</span></span><br><span class="line">       delay_us(<span class="number">500000</span>/hz); <span class="comment">//延时</span></span><br><span class="line">       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_SET); <span class="comment">//蜂鸣器接口输出高电平</span></span><br><span class="line">       delay_us(<span class="number">500000</span>/hz); <span class="comment">//延时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*超级马里奥*/</span></span><br><span class="line"><span class="keyword">uint16_t</span> mario[] = &#123;<span class="number">659</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">45</span>, <span class="number">523</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>, <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">466</span>, <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>,<span class="number">659</span>, <span class="number">784</span>,</span><br><span class="line">    <span class="number">880</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">494</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>,</span><br><span class="line">    <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">466</span>, <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">740</span>, <span class="number">622</span>, <span class="number">659</span>, <span class="number">523</span>,</span><br><span class="line">    <span class="number">587</span>, <span class="number">392</span>, <span class="number">440</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">740</span>, <span class="number">622</span>, <span class="number">659</span>, <span class="number">523</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">1046</span>, <span class="number">15</span>, <span class="number">1046</span>, <span class="number">1046</span>, <span class="number">30</span>, <span class="number">784</span>, <span class="number">740</span>, <span class="number">622</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">392</span>, <span class="number">440</span>,</span><br><span class="line">    <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">622</span>, <span class="number">30</span>, <span class="number">587</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">392</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">392</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">392</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">523</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">523</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">523</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">659</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">523</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">784</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>, <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">466</span>, <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>,</span><br><span class="line">    <span class="number">523</span>, <span class="number">587</span>, <span class="number">494</span>, <span class="number">30</span>, <span class="number">523</span>, <span class="number">30</span>, <span class="number">392</span>, <span class="number">30</span>, <span class="number">330</span>, <span class="number">30</span>, <span class="number">440</span>, <span class="number">30</span>, <span class="number">494</span>, <span class="number">15</span>, <span class="number">466</span>,</span><br><span class="line">    <span class="number">440</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">15</span>, <span class="number">523</span>, <span class="number">587</span>,</span><br><span class="line">    <span class="number">494</span>, <span class="number">30</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">415</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">698</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">698</span>, <span class="number">30</span>,</span><br><span class="line">    <span class="number">494</span>, <span class="number">880</span>, <span class="number">15</span>, <span class="number">880</span>, <span class="number">5</span>, <span class="number">880</span>, <span class="number">5</span>, <span class="number">784</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">15</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">392</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">659</span>, <span class="number">523</span>, <span class="number">15</span>, <span class="number">392</span>, <span class="number">15</span>, <span class="number">415</span>, <span class="number">15</span>, <span class="number">440</span>, <span class="number">698</span>, <span class="number">15</span>, <span class="number">698</span>, <span class="number">698</span>, <span class="number">30</span>, <span class="number">494</span>,</span><br><span class="line">    <span class="number">698</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">5</span>, <span class="number">698</span>, <span class="number">5</span>, <span class="number">659</span>, <span class="number">5</span>, <span class="number">587</span>, <span class="number">523</span>, <span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*小星星*/</span></span><br><span class="line"><span class="keyword">uint16_t</span> star[] = &#123;<span class="number">523</span>,<span class="number">523</span>,<span class="number">784</span>,<span class="number">784</span>,<span class="number">880</span>,<span class="number">880</span>,<span class="number">784</span>,<span class="number">15</span>,<span class="number">698</span>,<span class="number">698</span>,<span class="number">659</span>,<span class="number">659</span>,<span class="number">587</span>,<span class="number">587</span>,<span class="number">523</span>,<span class="number">15</span>,<span class="number">784</span>,<span class="number">784</span>,<span class="number">698</span>,<span class="number">698</span>,<span class="number">659</span>,<span class="number">659</span>,<span class="number">587</span>,<span class="number">15</span>,<span class="number">784</span>,<span class="number">784</span>,<span class="number">698</span>,<span class="number">698</span>,<span class="number">659</span>,<span class="number">659</span>,<span class="number">587</span>,<span class="number">15</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MIDI_PLAY</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint16_t</span> hz = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;ARRAY_SIZE(song); i++)&#123;</span><br><span class="line">hz = song[i];</span><br><span class="line"><span class="keyword">if</span>(hz &lt; <span class="number">50</span>)</span><br><span class="line">HAL_Delay(hz*<span class="number">10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    Beep(hz, <span class="number">160</span>);</span><br><span class="line">HAL_Delay(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> STM32 </tag>
            
            <tag> HAL库 </tag>
            
            <tag> 蜂鸣器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署个人网盘服务</title>
      <link href="/archives/fb8823a1.html"/>
      <url>/archives/fb8823a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云服务器部署个人网盘服务"><a href="#阿里云服务器部署个人网盘服务" class="headerlink" title="阿里云服务器部署个人网盘服务"></a>阿里云服务器部署个人网盘服务</h1><blockquote><p>相关资源：<br>kiftd ： <a href="https://github.com/KOHGYLW/kiftd">https://github.com/KOHGYLW/kiftd</a></p></blockquote><h2 id="1-安装JAVA运行环境"><a href="#1-安装JAVA运行环境" class="headerlink" title="1.安装JAVA运行环境"></a>1.安装JAVA运行环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install java-11-openjdk-devel</span><br></pre></td></tr></table></figure><p>安装完成后查看版本，输出下面内容说明已经安装好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nafxali ~]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;11.0.9.1&quot;</span> 2020-11-04 LTS</span><br><span class="line">OpenJDK Runtime Environment 18.9 (build 11.0.9.1+1-LTS)</span><br><span class="line">OpenJDK 64-Bit Server VM 18.9 (build 11.0.9.1+1-LTS, mixed mode, sharing)</span><br></pre></td></tr></table></figure><p>CentOS 8还支持无头版本的OpenJDK，该版本提供了无需图形用户界面（不支持键盘，鼠标和显示系统）来执行应用程序所需的最少Java运行时，该版本具有更少的依赖性和更少的系统资源，因此它更适合于服务器应用程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install java-11-openjdk-headless</span><br></pre></td></tr></table></figure><h2 id="2-下载kiftd包并解压"><a href="#2-下载kiftd包并解压" class="headerlink" title="2.下载kiftd包并解压"></a>2.下载kiftd包并解压</h2><p>Linux压缩包：<a href="https://cloud.189.cn/t/ruIr2eyeyUVb">https://cloud.189.cn/t/ruIr2eyeyUVb</a> (访问码:v5pj)<br>下载压缩包并上传到服务器，在具备rwx权限且不含中文的文件夹中解压，即可以用命令直接启动kiftd服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar kiftd-x.x.x-xxx.jar -console </span><br></pre></td></tr></table></figure><h2 id="3-后台运行kiftd"><a href="#3-后台运行kiftd" class="headerlink" title="3.后台运行kiftd"></a>3.后台运行kiftd</h2><h3 id="Screen-工具"><a href="#Screen-工具" class="headerlink" title="Screen 工具"></a>Screen 工具</h3><p>Screen 工具能够虚拟出一个终端并执行相应的操作。使用前，您需要先安装<br>该工具，例如在 Ubnutu 系统中，您可以使用以下命令进行安装： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install screen </span><br></pre></td></tr></table></figure><p>该工具安装完成后，您便可以使用它来运行 kiftd:  </p><h4 id="1-创建一个虚拟终端："><a href="#1-创建一个虚拟终端：" class="headerlink" title="1.创建一个虚拟终端："></a>1.创建一个虚拟终端：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S &#123;自定义的虚拟终端名称&#125; </span><br></pre></td></tr></table></figure><p>例如： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S kiftd </span><br></pre></td></tr></table></figure><h4 id="2-在虚拟终端中以命令模式启动-kiftd："><a href="#2-在虚拟终端中以命令模式启动-kiftd：" class="headerlink" title="2.在虚拟终端中以命令模式启动 kiftd："></a>2.在虚拟终端中以命令模式启动 kiftd：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar kiftd-x.x.x-xxx.jar -console </span><br></pre></td></tr></table></figure><p>之后您便可以断开 SSH 连接或者使用 Ctrl+A Ctrl+D 键暂时退出虚拟终端以进行其他操作。</p><h4 id="3，当您需要继续操作-kiftd-时："><a href="#3，当您需要继续操作-kiftd-时：" class="headerlink" title="3，当您需要继续操作 kiftd 时："></a>3，当您需要继续操作 kiftd 时：</h4><p>请使用 SSH 重新链接至远程服务器，之后使用虚拟终端名重新回到 screen虚拟终端： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r &#123;自定义的虚拟终端名称&#125; </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r kiftd </span><br></pre></td></tr></table></figure><p>这样您便能返回之前的虚拟终端并继续操作 kiftd。</p><h2 id="4-开放端口"><a href="#4-开放端口" class="headerlink" title="4.开放端口"></a>4.开放端口</h2><h3 id="服务器防火墙开放端口"><a href="#服务器防火墙开放端口" class="headerlink" title="服务器防火墙开放端口"></a>服务器防火墙开放端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">查看防火墙某个端口是否开放</span><br><span class="line">firewall-cmd --query-port=3306/tcp</span><br><span class="line">开放防火墙端口3306</span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">注意：开放端口后要重启防火墙生效</span><br><span class="line">重启防火墙</span><br><span class="line">systemctl restart firewalld</span><br><span class="line">关闭防火墙端口</span><br><span class="line">firewall-cmd --remove-port=3306/tcp --permanent</span><br><span class="line">查看防火墙状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line">关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">打开防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line">开放一段端口</span><br><span class="line">firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent</span><br><span class="line">查看开放的端口列表</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line">查看被监听(Listen)的端口</span><br><span class="line">netstat -lntp</span><br><span class="line">检查端口被哪个进程占用</span><br><span class="line">netstat -lnp|grep 3306</span><br></pre></td></tr></table></figure><h3 id="阿里云开放端口"><a href="#阿里云开放端口" class="headerlink" title="阿里云开放端口"></a>阿里云开放端口</h3><p>实例=&gt;安全组=&gt;手动添加</p>]]></content>
      
      
      <categories>
          
          <category> LINUX </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC-610E(电子组件的可接受性)</title>
      <link href="/archives/b3c014a2.html"/>
      <url>/archives/b3c014a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="IPC-610E（电子组件的可接受性）"><a href="#IPC-610E（电子组件的可接受性）" class="headerlink" title="IPC-610E（电子组件的可接受性）"></a>IPC-610E（电子组件的可接受性）</h1><h2 id="IPC简介"><a href="#IPC简介" class="headerlink" title="IPC简介"></a>IPC简介</h2><p>&emsp;&emsp;IPC最初为“The Institute of Printed Circuit”的缩写，即美国“印制电路板协会”，后改名为“The Institute of the Interconnecting and Packing Electronic Circuit”(电子电路互连与封装协会)，1999年再次更名为“Associatation Of Connecting Electronics Industries”(电子制造业协会”)。由于IPC知名度很高，所以更名后，IPC的标记和缩写仍然没有改变。IPC拥有两千六百多个协会成员，包括世界著名的从事印制电路板设计、制造、组装、OEM（Original equipment manufacturer 即原始设备制造商）加工、EMS（electronics manufacture service 即电子制造服务）外包的大公司，IPC与IEC、ISO、IEEE、JEDC一样，是美国乃至全球电子制造业最有影响力的组织之一。 </p><p>&emsp;&emsp;IPC-A-610是国际上电子制造业界普遍公认的可作为国际通行的质量检验标准。IPC-A-610收集了有关电子组件的外观质量可接受要求，规定了怎样把元器件合格地组装到电路板上，对每种级别的标准都提供了可测量的元器件位置和焊点尺寸，并提供合格焊点的相应技术指标。</p><h2 id="IPC-A-610E电子产品等级"><a href="#IPC-A-610E电子产品等级" class="headerlink" title="IPC-A-610E电子产品等级"></a>IPC-A-610E电子产品等级</h2><ol><li>1级-普通类电⼦子产品<br>包括那些对外观要求不高而以其组装功能完整为主要要求的产品。（如玩具、计算器等）</li><li>2级-专⽤用服务类电⼦子产品<br>包括那些要求持续运行和较长使用寿命的产品，最好能保持不间断工作但该要求不严格。一般情况下不会因使用环境而导致故障。（如通讯设备等）</li><li>3级-⾼高性能电⼦子产品<br>包括以连续具有高性能或严格按指令运行为关键的产品。这类产品的服务间断是不可接受的，且最终产品使用环境异常苛刻；有要求时产品必须能够正常运行，例如救生设备或飞行控制系统等其他关键系统。</li></ol><h2 id="IPC-A-610E-验收条件"><a href="#IPC-A-610E-验收条件" class="headerlink" title="IPC-A-610E 验收条件"></a>IPC-A-610E 验收条件</h2><p>&emsp;&emsp;当合同要求使用IPC-A-610，本标准中所有适用的要求应当被实施于所有适用的分包合同中。如无，按以下优先次序执行：</p><ul><li>用户与制造商之间达成的采购文件。</li><li>反映用户具体要求的总图或总装图。</li><li>用户引用或合同协议引用IPC-A-610。<br>当其他文件同时与IPC-A-610被引用时，应当在采购文件中规定其优先顺序。  </li></ul><p><strong>四级验收条件：</strong></p><ul><li><p>目标条件<br>&emsp;&emsp;是指近乎完美/首选的情形，然而这是一种理想而非总能达到的情形，且对于保证组件在使用环境下的可靠性并非必要的情形。</p></li><li><p>可接受条件<br>&emsp;&emsp;是指组件不必完美但要在使用环境下保持完整性和可靠性的特征。</p></li><li><p>缺陷条件<br>&emsp;&emsp;缺陷是指组件在其最终使用环境下不足以确保外形、装配和功能（3F）的情况。缺陷情况应当由制造商根据设计、服务和客户要求进行处置（处置：决定缺陷应该作何种处理)。处置可以是返工、维修、报废或照样使用，但不限于以上处理方式。其中维修或“照样使用”必须取得客户的认可。<br>★1级缺陷自动成为2级和3级缺陷。2级缺陷意味着对3级也是缺陷。</p></li><li><p>制程警示条件<br>&emsp;&emsp;制程警示（非缺陷）是指没有影响到产品的外形、装配和功能（3F）的情况。且对于保证组件在使用环境下的可靠性并非必要的情形。这种情况是由于材料、设计或操作人员/机器设备等相关因素引起的，既不能完全满足可接受条件又非缺陷。应该将制程警示纳入过程控制系统而对其实行监控。当制程警示的数量表明制程发生变异或朝着不理想的趋势变化时，则应该对工艺进行分析。结果可能要求采取措施以降低制程变异程度并提高产量。不要求对单一性制程警示进行处置。</p></li></ul><h2 id="专业名词解释"><a href="#专业名词解释" class="headerlink" title="专业名词解释"></a>专业名词解释</h2><ul><li>主面<br>总设计图上定义的封装与互连结构(PCB)面。（通常为包含最复杂或数量最多的元器件那一面。该面在通孔插装技术中有时又称作元器件面或焊接终止面）。</li><li>辅面<br>与主面相对的封装与互连结构（PCB）面。（在通孔插装技术中有时称作焊接面或焊接起始面）</li><li>焊接起始面<br>焊接起始面是指印制电路板上施加焊料的那一面。采用波峰焊、浸焊或拖焊时，通常又是PCB的辅面。采用手工焊接时，焊接起始面也可能是PCB的主面。</li><li>焊接终止面<br>焊接终止面是指通孔插装中PCB上焊料流向的那一面，采用波峰焊、浸焊或拖焊时，通常又是PCB的主面。采用手工焊接时，焊接终止面也可能是PCB的辅面。</li><li>冷焊接连接<br>是指呈现很差的润湿性、外表灰暗、疏松的焊接连接。（这种现象是由于焊料中杂质过多，焊接前清洁不充分，和/或焊接过程中热量不足所致。）</li><li>浸析<br>指焊接过程中金属基材或涂覆层的流失或去除。</li><li>照明<br>对被检查的部件应当有足够的照明。工作台表面的照明至少应该达到1000 lm/m2[约93英尺烛光]。应该选择不会产生阴影的光源。<br>注：选择光源时，色温是一个需要考虑的重要因素。色温在3000-5000o K范围的光源，清晰度会逐步增加，使用户能够鉴别出印制电路板组<br>件的各种特征和污染物。</li></ul><h2 id="焊接可接受性要求"><a href="#焊接可接受性要求" class="headerlink" title="焊接可接受性要求"></a>焊接可接受性要求</h2><h3 id="目标-1-2-3级"><a href="#目标-1-2-3级" class="headerlink" title="目标-1,2,3级"></a>目标-1,2,3级</h3><ul><li>焊料填充基本平滑，对连接的零部件呈现良好润湿。</li><li>零部件的轮廓容易分辨。</li><li>焊料在被连接部件上形成羽毛状边缘。</li><li>填充呈凹面状。<h3 id="可接受-1-2-3级"><a href="#可接受-1-2-3级" class="headerlink" title="可接受-1,2,3级"></a>可接受-1,2,3级</h3></li><li>有些材料和工艺，例如：无铅合金、大热容PCB引起的慢冷却，可能导致干枯粗糙、灰暗、或颗粒状这种与材料和工艺相关的焊料外观，属正常现象。这样的焊接连接是可接受的。</li><li>焊接连接润湿角（焊料与元器件之间和焊料与焊盘之间）不超过90o （图5-1的A和B）。–例外的情况是当焊料轮廓延伸到可焊端边缘或阻焊膜时，润湿角可以超过90o（图5-1的C和D）</li><li>典型的锡铅焊点特征：光亮 平滑  凹形表面  轮廓清晰</li></ul><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IPC-610E </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPC-610E </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境温湿度监控系统（51+DHT11+1602液晶）</title>
      <link href="/archives/3003c9dd.html"/>
      <url>/archives/3003c9dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境温湿度监控系统（51-DHT11-1602液晶）"><a href="#环境温湿度监控系统（51-DHT11-1602液晶）" class="headerlink" title="环境温湿度监控系统（51+DHT11+1602液晶）"></a>环境温湿度监控系统（51+DHT11+1602液晶）</h1><div class="note info flat"><p>使用模块：<br>DHT11 Datasheet: <a href="https://www.alldatasheetcn.com/datasheet-pdf/pdf/1132088/ETC2/DHT11.html">https://www.alldatasheetcn.com/datasheet-pdf/pdf/1132088/ETC2/DHT11.html</a><br>SMC1602 Datasheet: <a href="https://www.alldatasheetcn.com/datasheet-pdf/pdf/106031/ETC/SMC1602A.html">https://www.alldatasheetcn.com/datasheet-pdf/pdf/106031/ETC/SMC1602A.html</a><br>89C52 Datasheet: <a href="https://www.alldatasheet.com/datasheet-pdf/pdf/240685/ATMEL/AT89C52.html">https://www.alldatasheet.com/datasheet-pdf/pdf/240685/ATMEL/AT89C52.html</a></p></div><h2 id="一-原理图"><a href="#一-原理图" class="headerlink" title="一.原理图"></a>一.原理图</h2><p><img src="https://s2.loli.net/2022/07/10/udMPwKBETUZiQNR.png" alt="Schematic"></p><h2 id="二-1602显示模块"><a href="#二-1602显示模块" class="headerlink" title="二.1602显示模块"></a>二.1602显示模块</h2><p>模块头文件：引脚定义，接口定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _1602_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _1602_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LCD_Bus P2 <span class="comment">//LCD1602数据总线</span></span></span><br><span class="line">sbit RS = P0^<span class="number">7</span>;<span class="comment">// LCD数据/命令选择端</span></span><br><span class="line">sbit RW = P0^<span class="number">6</span>;<span class="comment">// LCD读写选择端</span></span><br><span class="line">sbit EN = P0^<span class="number">5</span>;<span class="comment">// LCD使能端，高脉冲有效</span></span><br><span class="line"></span><br><span class="line">sbit busy_led1 = P1^<span class="number">0</span>; <span class="comment">//LCD忙指示灯</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Lcd_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;                    <span class="comment">//1602初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Lcd_WriteData</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Data)</span></span>; <span class="comment">//写数据</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Lcd_WriteCmd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Cmd)</span></span>; <span class="comment">//写指令</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Lcd_WriteStr</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *Str)</span></span>; <span class="comment">//写一串字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>函数实现见<a href="https://github.com/Nafoaix/DHT11-1602.git"><code>GIT仓库</code></a>或参考<a href="https://www.alldatasheetcn.com/datasheet-pdf/pdf/106031/ETC/SMC1602A.html"><code>SMC1602 Datasheet</code></a>编写。</p><h2 id="三-DHT11模块"><a href="#三-DHT11模块" class="headerlink" title="三.DHT11模块"></a>三.DHT11模块</h2><p>模块头文件：引脚定义，接口定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _DHT11_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DHT11_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrins.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit DHT11_Data = P0^<span class="number">4</span>;   <span class="comment">//dht11数据端口</span></span><br><span class="line"></span><br><span class="line">sbit NOresponse_led2 = P1^<span class="number">1</span>;</span><br><span class="line">sbit start_led3 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ERRORREVISE_LED4 = P1^<span class="number">3</span>;</span><br><span class="line">sbit test_led5 = P1^<span class="number">4</span>;</span><br><span class="line">sbit ASK_LED6 = P1^<span class="number">5</span>;</span><br><span class="line">sbit rec_byte_led7 = P1^<span class="number">6</span>;</span><br><span class="line">sbit rec_40_led8 = P1^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DHT11 测量范围 20~90%RH(5%RH) 0~50C(2C) 工作电压3~ 5.5V*/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> rec_dat[<span class="number">16</span>];<span class="comment">//全局变量 用于显示的接收数据数组             </span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> RH,TH;</span><br><span class="line"><span class="comment">//extern void DHT11_delay_us(unsigned char us); //11.0592大概每次循环延时4.3us</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">DHT11_delay_ms</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ms)</span></span>;  <span class="comment">//ms延时</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">DHT11_rec_40</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//接收40位全部数据</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>函数实现见<a href="https://github.com/Nafoaix/DHT11-1602.git"><code>GIT仓库</code></a>或参考<a href="https://www.alldatasheetcn.com/datasheet-pdf/pdf/1132088/ETC2/DHT11.html"><code>DHT11 Datasheet</code></a>编写。</p><h2 id="四-功能模块"><a href="#四-功能模块" class="headerlink" title="四.功能模块"></a>四.功能模块</h2><p>主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;1602.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DHT11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uchar unsigned char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="comment">/*------------按键引脚---------------*/</span></span><br><span class="line">sbit ok_SW1 = P3^<span class="number">5</span>; <span class="comment">//确定-SW1</span></span><br><span class="line">sbit add_SW2 = P3^<span class="number">4</span>;<span class="comment">//增加-SW2</span></span><br><span class="line">sbit sub_SW3 = P3^<span class="number">3</span>;<span class="comment">//减少-SW3</span></span><br><span class="line">sbit sw_SW4 = P3^<span class="number">2</span>; <span class="comment">//选择-SW4</span></span><br><span class="line"><span class="comment">/*------------蜂鸣器引脚---------------*/</span></span><br><span class="line">sbit bell = P3^<span class="number">6</span>;</span><br><span class="line"><span class="comment">/*------------变量声明---------------*/</span></span><br><span class="line">uchar HTemp,LTemp,HRH,LRH,<span class="built_in">set</span>;</span><br><span class="line"><span class="comment">/*------------函数声明---------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Key_Scan</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_Alarm_Timer0</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">uchar i;   <span class="comment">//rec_dat[]数组显示用</span></span><br><span class="line">DHT11_delay_ms(<span class="number">1500</span>);   <span class="comment">//DHT11上电后要等待1S以越过不稳定状态在此期间不能发送任何指令</span></span><br><span class="line">DHT11_rec_40();</span><br><span class="line">Lcd_Init();<span class="comment">//Lcd初始化</span></span><br><span class="line">HTemp=<span class="number">35</span>,LTemp=<span class="number">15</span>;HRH=<span class="number">80</span>,LRH=<span class="number">20</span>;<span class="built_in">set</span>=<span class="number">2</span>;</span><br><span class="line">Init_Alarm_Timer0();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(<span class="built_in">set</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Press S1 to set &quot;</span>);</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span> + <span class="number">0x40</span>);<span class="comment">//设置数据指针到第二行首</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)&#123;Lcd_WriteData(rec_dat[i]);&#125;   <span class="comment">//显示数据 </span></span><br><span class="line"><span class="keyword">if</span>(Key_Scan() == <span class="number">1</span>) &#123;<span class="built_in">set</span> = <span class="number">2</span>;&#125;</span><br><span class="line">                DHT11_delay_ms(<span class="number">2500</span>);</span><br><span class="line">DHT11_rec_40();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Set the max RH  &quot;</span>);</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span> + <span class="number">0x40</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Maximum RH: &quot;</span>);</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(HRH/<span class="number">10</span>));</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(HRH%<span class="number">10</span>));</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;%  &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(Key_Scan())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">set</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">HRH+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">HRH-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Set the min RH  &quot;</span>);</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span> + <span class="number">0x40</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Minimum RH: &quot;</span>);</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(LRH/<span class="number">10</span>));</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(LRH%<span class="number">10</span>));</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;%  &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(Key_Scan())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">set</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">LRH+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">LRH-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Set the max Temp &quot;</span>);</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span> + <span class="number">0x40</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Max Temp:  &quot;</span>);</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(HTemp/<span class="number">10</span>));</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(HTemp%<span class="number">10</span>));</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+<span class="number">175</span>); </span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;C   &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(Key_Scan())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">set</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">HTemp+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">HTemp-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Set the min Temp &quot;</span>);</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span> + <span class="number">0x40</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Min Temp:  &quot;</span>);</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(LTemp/<span class="number">10</span>));</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+(LTemp%<span class="number">10</span>));</span><br><span class="line">Lcd_WriteData(<span class="string">&#x27;0&#x27;</span>+<span class="number">175</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;C   &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(Key_Scan())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">set</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">LTemp+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">LTemp-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: </span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Over Temp alarm &quot;</span>);</span><br><span class="line">bell = ~bell;</span><br><span class="line"><span class="keyword">if</span>(Key_Scan()) &#123; <span class="built_in">set</span> = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: </span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;Over RH alarm   &quot;</span>);</span><br><span class="line">bell = ~bell;</span><br><span class="line"><span class="keyword">if</span>(Key_Scan()) &#123; <span class="built_in">set</span> = <span class="number">2</span>; &#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;ERROR 101       &quot;</span>);</span><br><span class="line">Lcd_WriteCmd(<span class="number">0x80</span> + <span class="number">0x40</span>);</span><br><span class="line">Lcd_WriteStr(<span class="string">&quot;UNKNOW SET VALUE&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(Key_Scan()) &#123; <span class="built_in">set</span> = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_Alarm_Timer0</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TMOD |= <span class="number">0x01</span>;  <span class="comment">//使用工作模式1，16位定时器，使用&quot;|&quot;或等符号可以在使用多个定时器时不受影响     </span></span><br><span class="line">TH0 = (<span class="number">65535</span><span class="number">-46082</span>) / <span class="number">256</span>;<span class="comment">//给定初值50ms</span></span><br><span class="line">TL0 = (<span class="number">65535</span><span class="number">-46082</span>) % <span class="number">256</span>;</span><br><span class="line">EA=<span class="number">1</span>;             <span class="comment">//打开总中断</span></span><br><span class="line">ET0=<span class="number">1</span>;            <span class="comment">//定时器中断打开 T0的溢出中断允许位</span></span><br><span class="line">TR0 = <span class="number">1</span>;  <span class="comment">//打开定时器开关</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer0_Alarm</span><span class="params">(<span class="keyword">void</span>)</span> interrupt 1</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TH0 = (<span class="number">65535</span><span class="number">-46082</span>) / <span class="number">256</span>;<span class="comment">//重设初值</span></span><br><span class="line">TL0 = (<span class="number">65535</span><span class="number">-46082</span>) % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(TH&lt;LTemp||TH&gt;HTemp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span> = <span class="number">6</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(RH&lt;LRH||RH&gt;HRH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span> = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Key_Scan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> keyValue = <span class="number">0</span> , i; <span class="comment">//保存键值</span></span><br><span class="line">    <span class="comment">//--检测按键SW1--//</span></span><br><span class="line">    <span class="keyword">if</span> (ok_SW1 != <span class="number">1</span>)<span class="comment">//检测按键&#x27;确定-SW1&#x27;是否按下 按键被按下VCC上拉电阻接地，输入线线路电压0V</span></span><br><span class="line">    &#123;</span><br><span class="line">    DHT11_delay_ms(<span class="number">10</span>);<span class="comment">//消除抖动</span></span><br><span class="line">        <span class="keyword">if</span> (ok_SW1 != <span class="number">1</span>)<span class="comment">//再次检测按键是否按下</span></span><br><span class="line">        &#123;</span><br><span class="line">            keyValue = <span class="number">1</span>;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i&lt;<span class="number">50</span>) &amp;&amp; (ok_SW1 != <span class="number">1</span>)) <span class="comment">//检测按键是否松开</span></span><br><span class="line">            &#123;</span><br><span class="line">                DHT11_delay_ms(<span class="number">10</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//--检测按键SW2--//</span></span><br><span class="line">    <span class="keyword">if</span> (add_SW2 != <span class="number">1</span>)<span class="comment">//检测&#x27;增加-SW2&#x27;是否按下</span></span><br><span class="line">    &#123;</span><br><span class="line">        DHT11_delay_ms(<span class="number">10</span>);<span class="comment">//消除抖动</span></span><br><span class="line">        <span class="keyword">if</span> (add_SW2!= <span class="number">1</span>)<span class="comment">//再次检测按键是否按下</span></span><br><span class="line">        &#123;</span><br><span class="line">            keyValue = <span class="number">2</span>;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i&lt;<span class="number">50</span>) &amp;&amp; (add_SW2 != <span class="number">1</span>)) <span class="comment">//检测按键是否松开</span></span><br><span class="line">            &#123;</span><br><span class="line">                DHT11_delay_ms(<span class="number">10</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//--检测按键SW3--//</span></span><br><span class="line">    <span class="keyword">if</span> (sub_SW3 != <span class="number">1</span>)<span class="comment">//检测&#x27;减少-SW3&#x27;是否按下</span></span><br><span class="line">    &#123;</span><br><span class="line">        DHT11_delay_ms(<span class="number">10</span>);<span class="comment">//消除抖动</span></span><br><span class="line">        <span class="keyword">if</span> (sub_SW3 != <span class="number">1</span>)<span class="comment">//再次检测按键是否按下</span></span><br><span class="line">        &#123;</span><br><span class="line">            keyValue = <span class="number">3</span>;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i&lt;<span class="number">50</span>) &amp;&amp; (sub_SW3 != <span class="number">1</span>)) <span class="comment">//检测按键是否松开</span></span><br><span class="line">            &#123;</span><br><span class="line">                DHT11_delay_ms(<span class="number">10</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//--检测按键SW4--//</span></span><br><span class="line">    <span class="keyword">if</span> (sw_SW4 != <span class="number">1</span>)<span class="comment">//检测&#x27;选择-SW4&#x27;是否按下</span></span><br><span class="line">    &#123;</span><br><span class="line">        DHT11_delay_ms(<span class="number">10</span>);<span class="comment">//消除抖动</span></span><br><span class="line">        <span class="keyword">if</span> (sw_SW4!= <span class="number">1</span>)<span class="comment">//再次检测按键是否按下</span></span><br><span class="line">        &#123;</span><br><span class="line">            keyValue = <span class="number">4</span>;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i&lt;<span class="number">50</span>) &amp;&amp; (sw_SW4 != <span class="number">1</span>)) <span class="comment">//检测按键是否松开</span></span><br><span class="line">            &#123;</span><br><span class="line">                DHT11_delay_ms(<span class="number">10</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyValue;   <span class="comment">//将读取到键值的值返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips:</p><p>nop指令的作用：<br>1）就是通过nop指令的填充（nop指令一个字节），使指令按字对齐，从而减少取指令时的内存访问次数。（一般用来内存地址偶数对齐，比如有一条指令，占3字节，这时候使用nop指令，cpu 就可以从第四个字节处读取指令了。）<br>2）通过nop指令产生一定的延迟，但是对于快速的CPU来说效果不明显，可以使用rep前缀，多延迟几个时钟。<br>3）i/o传输时，也会用一下 nop，等待缓冲区清空，总线恢复；<br>4）清除由上一个算术逻辑指令设置的flag位；</p><p>该函数是在51单片机中用的延时函数，表示执行一条没有什么意义的指令，延时一个指令周期，有的指令周期是两个或两个以上的机械周期，但是_nop_();指令需要的只是一个机械周期也就是12个时钟周期（震荡周期）。<br>51单片机中，1个机械周期 = 12个时钟周期 = 12 * （ 1 / f）。（f 为晶振频率）。<br>如果只用的是12MHZ的晶振，那么 一个机械周期就是1us；也就是说：<br>nop(); 指令的延迟时间为 1us。可以较为精确得控制延迟时间。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 51 </tag>
            
            <tag> 1602 </tag>
            
            <tag> DHT11 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在浏览器中输入 URL 回车之后发生了什么</title>
      <link href="/archives/c0d06efd.html"/>
      <url>/archives/c0d06efd.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本文转自<a href="https://4ark.me//post/b6c7c0a2.html">4Ark</a><br>注意: 本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，儘管这是不切实际的。</p></div><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li></ol><h3 id="一、URL-解析"><a href="#一、URL-解析" class="headerlink" title="一、URL 解析"></a>一、URL 解析</h3><ul><li>地址解析<br>  首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</li><li>HSTS（HTTP Strict Transport Security）<br>  由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面</li><li>其他操作<br>  浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</li><li>检查缓存<br>  <img src="https://s2.loli.net/2022/08/15/KE3gktbnMwNuILy.png" alt="What_happens_when_you_type_an_URL_in_the_browser_and_press_enter"></li></ul><h3 id="二、DNS-查询"><a href="#二、DNS-查询" class="headerlink" title="二、DNS 查询"></a>二、DNS 查询</h3><p><strong>基本步骤</strong></p><p><img src="https://s2.loli.net/2022/07/10/iMvbQPoEr3ytf7e.png" alt="DNS查询"></p><ol><li><p>浏览器缓存<br>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p></li><li><p>操作系统缓存<br>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p></li><li><p>路由器缓存<br>路由器也有自己的缓存。</p></li><li><p>ISP DNS 缓存<br>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p></li><li><p>根域名服务器查询<br>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p><p><img src="https://s2.loli.net/2022/07/10/VxvCpokuf8QqJsM.png" alt="DNS服务器查询"></p><blockquote><p>根域名服务器：<a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科</a></p></blockquote><p> <strong>需要注意的点</strong></p><ul><li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li>迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li>什么是 DNS 劫持</li><li>前端 dns-prefetch 优化</li></ul></li></ol><h3 id="三、TCP-连接"><a href="#三、TCP-连接" class="headerlink" title="三、TCP 连接"></a>三、TCP 连接</h3><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p><p><img src="https://s2.loli.net/2022/07/10/A9oSeLUd2yhXZzf.png" alt="TCPIP"></p><ol><li><p>应用层：发送 HTTP 请求<br>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><blockquote><p>1.请求报头（Request Header）：请求方法、目标地址、遵循的协议等等<br>2.请求主体（其他参数）</p></blockquote></li><li><p>传输层：TCP 传输报文<br>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。<br>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。<br>相关知识点：<br>SYN 泛洪攻击</p></blockquote></li><li><p>网络层：IP 协议查询 Mac 地址<br>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。<br>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p></blockquote></li><li><p>链路层：以太网协议</p></li></ol><h4 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h4><p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p><ul><li>标头：数据包的发送者、接受者、数据类型</li><li>数据：数据包具体内容</li></ul><h4 id="Mac-地址"><a href="#Mac-地址" class="headerlink" title="Mac 地址"></a>Mac 地址</h4><p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p>注意：接收方回应是单播。</p><blockquote><p>相关知识点：<br>ARP 攻击</p></blockquote><p><strong>服务器接受请求</strong><br>接受过程就是把以上步骤逆转过来，参见上图。</p><h3 id="四、服务器处理请求"><a href="#四、服务器处理请求" class="headerlink" title="四、服务器处理请求"></a>四、服务器处理请求</h3><p><strong>大致流程</strong><br><img src="https://s2.loli.net/2022/07/10/O7j852nt3zrFHay.png" alt="大致流程"></p><h4 id="HTTPD"><a href="#HTTPD" class="headerlink" title="HTTPD"></a>HTTPD</h4><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><h4 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h4><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><pre><code>验证是否配置虚拟主机验证虚拟主机是否接受此方法验证该用户可以使用该方法（根据 IP 地址、身份信息等）</code></pre><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>假如服务器配置了 HTTP 重定向，就会返回一个 301 永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：<a href="https://www.cnblogs.com/workest/p/3891321.html">详见这篇文章</a></p></blockquote><h4 id="URL-重写"><a href="#URL-重写" class="headerlink" title="URL 重写"></a>URL 重写</h4><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h3 id="五、浏览器接受响应"><a href="#五、浏览器接受响应" class="headerlink" title="五、浏览器接受响应"></a>五、浏览器接受响应</h3><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。<br>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。<br>如果响应资源进行了压缩（比如 gzip），还需要进行解压。<br>然后，对响应资源做缓存。<br>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h3 id="六、渲染页面"><a href="#六、渲染页面" class="headerlink" title="六、渲染页面"></a>六、渲染页面</h3><h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><p><img src="https://s2.loli.net/2022/07/10/gU6cvTSnpYhWMIo.png" alt="浏览器内核"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><p><img src="https://s2.loli.net/2022/08/15/ALvfIks9PJtleRG.png" alt="基本流程"></p><h4 id="1-HTML-解析"><a href="#1-HTML-解析" class="headerlink" title="1.HTML 解析"></a>1.HTML 解析</h4><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><ol><li><p>解码（encoding）<br>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p></li><li><p>预解析（pre-parsing）<br>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如 img 标签的 src 属性，并将这个请求加到请求队列中。</p></li><li><p>符号化（Tokenization）<br>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。<br>它通过一个状态机去识别符号的状态，比如遇到&lt;，&gt;状态都会产生变化。</p></li><li><p>构建树（tree construction）</p><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote></li></ol><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建 DOM 对象并把这些符号插入到 DOM 对象中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/10/sprnHj5wQLEGC62.png" alt="HTMLDOM"></p><p><strong>浏览器容错进制</strong><br>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><p><strong>事件</strong><br>当整个解析的过程完成以后，浏览器会通过 <code>DOMContentLoaded</code> 事件来通知 <code>DOM</code> 解析完成。</p><h4 id="2-CSS-解析"><a href="#2-CSS-解析" class="headerlink" title="2. CSS 解析"></a>2. CSS 解析</h4><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 <code>CSS</code>，根据语法<a href="https://drafts.csswg.org/css-syntax-3/">规范解析</a>出所有的 <code>CSS</code> 并进行标记化，然后我们得到一个规则表。</p><p><strong>CSS 匹配规则</strong><br>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p &#123; font-size :14px &#125;</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为 <code>div</code>。</p><p>所以我们写 <code>CSS</code> 时，尽量用 <code>id</code> 和 <code>class</code>，千万不要过度层叠。</p><h4 id="3-渲染树"><a href="#3-渲染树" class="headerlink" title="3. 渲染树"></a>3. 渲染树</h4><p>其实这就是一个 <code>DOM</code> 树和 <code>CSS</code> 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p></blockquote><p><strong>计算</strong><br>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、<code>px</code>，比如把 <code>rem</code> 转化为 <code>px</code>。</p><p><strong>级联</strong><br>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做 specificity 的公式，这个公式会通过：</p><pre><code>  1.  标签名、class、id  2.  是否内联样式  3.  !important</code></pre><p>然后得出一个权重值，取最高的那个。</p><p><strong>渲染阻塞</strong><br>当遇到一个 script 标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。<br>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><pre><code>  - CSS 会阻塞 JS 执行  - JS 会阻塞后面的 DOM 解析</code></pre><p>为了避免这种情况，应该以下原则：</p><pre><code>- CSS 资源排在 JavaScript 资源前面- JS 放在 HTML 最底部，也就是 &lt;/body&gt;前</code></pre><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<a href="https://github.com/xiaoyu2er/blog/issues/8">这篇文章</a></p><h4 id="4-布局与绘制"><a href="#4-布局与绘制" class="headerlink" title="4. 布局与绘制"></a>4. 布局与绘制</h4><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><h4 id="5-合并渲染层"><a href="#5-合并渲染层" class="headerlink" title="5. 合并渲染层"></a>5. 合并渲染层</h4><p>把以上绘制的所有图片合并，最终输出一张图片。</p><h4 id="6-回流与重绘"><a href="#6-回流与重绘" class="headerlink" title="6. 回流与重绘"></a>6. 回流与重绘</h4><p><strong>回流(reflow)</strong><br>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从 html 标签开始递归往下，重新计算位置和大小。<br>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><p><strong>重绘(repaint)</strong><br>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。<br>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。<br>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。<br>比如：<br>    - <code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</p><h4 id="7-JavaScript-编译执行"><a href="#7-JavaScript-编译执行" class="headerlink" title="7. JavaScript 编译执行"></a>7. JavaScript 编译执行</h4><p><strong>大致流程</strong><br>可以分为三个阶段：<br><img src="https://s2.loli.net/2022/07/10/QwOgRlVY6BCoTpP.png" alt="JavaScript 编译执行流程"></p><h5 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a>1. 词法分析</h5><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>分词，例如将 var a = 2，，分成 var、a、=、2 这样的词法单元。</li><li>解析，将词法单元转换成抽象语法树（AST）。</li><li>代码生成，将抽象语法树转换成机器指令。</li></ul><h5 id="2-预编译"><a href="#2-预编译" class="headerlink" title="2. 预编译"></a>2. 预编译</h5><p>JS 有三种运行环境：</p><ul><li>全局环境</li><li>函数环境</li><li>eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p><strong>创建执行上下文</strong><br>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<pre><code>- 参数、函数、变量</code></pre></li><li>建立作用域链  <pre><code>- 确认当前执行环境是否能访问变量</code></pre></li><li>确定 This 指向</li></ul><h5 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h5><p><strong>JS 线程</strong><br><img src="https://s2.loli.net/2022/07/10/1bqEzQAecsky9gl.png" alt="JS 线程"><br>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>定时器触发线程：主要控制setInterval和setTimeout，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>HTTP 异步请求线程：通过XMLHttpRequest连接后，通过浏览器新开的一个线程，监控readyState状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待JS引擎线程执行。</li></ul><p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p><p><strong>宏任务</strong><br>分为：</p><ul><li>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待JS引擎主线程上的任务执行完毕时才开始执行，例如异步Ajax、DOM事件，setTimeout等。</li></ul><p><strong>微任务</strong><br>微任务是 ES6 和 Node 环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://s2.loli.net/2022/07/10/7xCXGJQ6UW4mZYM.png" alt="微任务"></p><p>代码例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 宏任务 同步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>); <span class="comment">// 宏任务 异步</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 宏任务 同步</span></span><br><span class="line">resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>) <span class="comment">// 微任务</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>) <span class="comment">// 宏任务 同步</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码输出顺序为：1,3,5,4,2</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN</a></li><li><a href="https://alistapart.com/article/tags-to-dom/">Tags to DOM</a></li><li><a href="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">彻底理解浏览器的缓存机制</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li><li><a href="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入浅出浏览器渲染原理</a></li><li><a href="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js 引擎的执行过程（一）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习笔记（一）</title>
      <link href="/archives/60acca91.html"/>
      <url>/archives/60acca91.html</url>
      
        <content type="html"><![CDATA[<p>Null</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盘点国外知名游戏厂商（一）CD Projekt</title>
      <link href="/archives/29f83498.html"/>
      <url>/archives/29f83498.html</url>
      
        <content type="html"><![CDATA[<h1 id="盘点国外知名游戏厂商（一）CD-Projekt"><a href="#盘点国外知名游戏厂商（一）CD-Projekt" class="headerlink" title="盘点国外知名游戏厂商（一）CD Projekt"></a>盘点国外知名游戏厂商（一）CD Projekt</h1><div class="note info flat"><p>本篇文章写于 2020 年 4 月，在赛博朋克 2077 漫长而又煎熬的等待之余我我决定以我<strong>个人视角</strong>盘点下那些带给我无数爱恨、惊喜与感动的游戏厂商们。文章资料同通过互联网搜集整理，如有错误还请指正，本文内容仅代表个人观点。</p></div><h2 id="CD-Projekt-RED"><a href="#CD-Projekt-RED" class="headerlink" title="CD Projekt RED"></a>CD Projekt RED</h2><p><img src="https://s2.loli.net/2022/07/10/z8pOxYoBUrTKXZC.jpg" alt="CDPR"></p><blockquote><p><a href="https://www.bilibili.com/video/av16789674/"><code>av16789674</code></a>《巫师 3》以及 CD Projekt 成功发展史-全 6 集游戏纪录片</p></blockquote><p>&emsp;&emsp;第一个就提到“波兰蠢驴”的原因<del>肯定不是馋 9 月即将登陆的《赛博朋克 2077》 的身子</del>，也不是《巫师》三部曲那出色的游戏质量，而是他们心中那份对玩家足够的诚意与对游戏的热爱，让我将其视作当代游戏界的绿洲。</p><p>&emsp;&emsp;CD Projekt Red（后面简称 CDPR） 是波兰电子游戏研发商 CD Projekt 下的游戏开发部门，我们还是先从 CD Projekt 旗下的数字发行平台 GOG.com 今年推出的<code>[30 天内退款政策]</code>说起吧。这个政策毫无疑问是将目前市面上的数字发行平台的退换政策戳出了一个大窟窿，本来 STEAM 平台的<code>[14 天 2 小时]</code>已经足够宽松了，但 CD Projekt 这番举措瞬间在全世界的游戏厂商、平台和玩家群体间炸开了锅，其实我觉得这本来就是“波兰蠢驴”玩家至上理念的一贯体现，在这先不论这是不是一次精心设计的 PR 行为，这一举措确实给玩家们带来了大量的利好，你可以有更大的余地选择更精良自己更喜欢的游戏。也有不少人担心目前的玩家群体还没形成完全自觉的良好氛围来从中恶意牟利，担心这项举措会导致大量 3A 游戏不选择在 GOG 上发售，确实“波兰蠢驴”自己这也是在赌，但是他们已经赌了太多次了，他们也甘愿为了给玩家们一个更好的游戏环境去赌不是吗？</p><p>&emsp;&emsp;1994 年在受历史等因素影响下，社会环境、经济环境动荡贫瘠的波兰，想要用电脑或是想玩被视为“资本主义的精神毒品”的游戏只能通过地下的集市，而这种本就灰色的地带也滋生了大量盗版游戏。作为 CD Projekt 的联合创始人马尔钦（Marcin Iwinski）和米卡（Michal Kicinski）深知在当时盗版如此猖獗环境之下，想要从头开发游戏赚钱是不现实的事，于是两人做起了波兰国内鲜有的游戏代理发行商业务。在卖游戏赚到了第一桶金之后他们并不满足于此，于是他们两个人加上一台电脑一间公寓的 CD Projekt 便注册成立了。公司成立后的第一件事便是与当时波兰国内盗版横行的游戏环境对抗，作为热爱游戏的二人，他们深知玩家们的需求，他们在 1996 年开始做游戏的本地化，将游戏翻译成波兰语投放到市场。恰逢 1998 年龙与地下城旷世神作《博德之门》发售，马尔钦坚信这款游戏能在波兰市场上获得成功，于是第一时间与 bioware 签订协议，当时的盗版游戏很少有翻译或翻译质量尚可的，CD Projekt 决定用本地化打败盗版势力让玩家心甘情愿地掏钱买正版。但是《博德之门》在当时作为一款优秀的作品有海量的文本和丰富的语音，本地化成本非常之高。CD Projekt 之前几年的利润都用在了海量的文本翻译、邀请顶级的配音演员进行出演、前所未有的大规模推广上，更是在光盘的基础之上送了一份火漆封缄的羊皮纸地图、一本厚实的龙与地下城规则手册以及一张原声 CD，这几乎耗尽了公司所有的积蓄，CD Projekt 的命运全赌在这款游戏上了。然而“波兰蠢驴”的这份良心让他们赢得了对盗版的战争，仅发售当日就卖出了 18000 套游戏，这次的成功更是加深了他们对于玩家至上的理念，他们认为只要你做的足够好，玩家没理由不买你的正版产品。廉价的盗版可能并不足以成为失败的借口。</p><p><img src="https://s2.loli.net/2022/07/10/zpSxt7KqRrbD3V1.png" alt="CDPR"></p><p>&emsp;&emsp;这时开始他们决定自己开发游戏来贯彻自己的理念，这就有了现在的 CDPR（CD Projekt Red）工作室，成立之初 CDPR 是一个仅有 15 人的工作室，虽然从之前合作过的 Bioware 那里借到了引擎，但是这么小的团队甚至没有游戏开发流程经验的 CDPR 明显是没办法开发出他们要的作品的，为了他们心中那份对游戏的热爱他们花了近五年时间，一路扩充到 100 人的工作室，发售时间不断跳票,几乎耗尽了资金的“波兰蠢驴”将自己的命运赌在了《巫师 1》上，用马尔钦的话说，“那是我们所拥有的全部资金，还要再多些。”幸运的是《巫师 1》虽然有着游戏节奏过慢等的缺点，但终究瑕不掩瑜，及其出色的叙事，加上独特的战斗系统和当时在波兰国民级小说《猎魔人》IP 加成下，《巫师 1》取得了超 200 万的销量并大获好评，“波兰蠢驴”又赌赢了。由此受到了极大鼓励的 CDPR 马上立项了《巫师 2》，虽然有了前作的成功但后面的《巫师 2》也是历经挫折，由于雅达利 <em>(前面《巫师 1》研发使公司快要弹尽粮绝时 CDPR 与雅达利谈成协议获得了几万美元的投资但是发行权交给了雅达利)</em> 想要求把《巫师》移植到主机平台上，由于专心开发《巫师 2》CDPR 没有太多精力，于是将移植工作交给一个法国的开发商，最后这个主机移植项目在耗费了 CDPR 大量的资金后被取消了。</p><blockquote><p>马尔钦曾在媒体采访时抱怨称对方总是还要更多的钱、开发者、时间，以至于他们在对方身上花了几百万美元，比自己公司的支出还要高。</p></blockquote><p>&emsp;&emsp;恰逢 2008 年金融危机,他们还要偿还雅达利之前的巨额投资，导致公司又又濒临破产躺在了现实的断头台前，马尔钦为了解决财政危机，公司解散了一批子公司 <code>（这里面一部分员工组建了另一个公司——11bit 也就是后面推出《这是我的战争》《冰气时代》的工作室)</code> 公司人数从 350 减少到不到 200 人，,削减开支，削减《巫师 2》项目的内容，并对一家 IT 公司进行反向收购，借壳在华沙证券交易所上市。这些注入的资金使得 CDPR 可以专心制作《巫师 2》和自研引擎的开发<code>（之前从 Bioware 借到的 Aurora 引擎难以满足当时 PC 得的要求了，CDPR 在重写了引擎近 80%的代码后不得已放弃转而自研引擎）</code>，经过三年半的研发时间后，2011 年《巫师 2：国王刺客》正式发售第一年在 PC 就卖了 110 万套，而且由于自研引擎使得游戏更为方便的移植到当时的两大主机平台<code>（PS3、XBOX360）</code>。《巫师 2》和当年的“老滚 5”平分秋色，收获国际声誉的 CDPR 已然成为了波兰的骄傲，使政府开始极大重视并鼓励游戏行业的发展。甚至 2011 年奥巴马赴波兰进行国事访问时波兰总理将《巫师 2》作为国礼相赠。“波兰蠢驴”们为了回馈玩家对《巫师 2》的支持，在游戏正式发售一年后公布了《巫师 2》的增强版，除了在原版基础上进行了画质增强外，还加入了当初砍掉的那些内容，并将这些内容全部免费送给玩家。</p><p><img src="https://s2.loli.net/2022/07/10/g6ZcUIvp4DajGon.png" alt="CD Projekt RED"></p><p>&emsp;&emsp;后面发生的事相信大家都已经知道了，就是大家津津乐道的“波兰蠢驴”封神之作《巫师 3》了，三年半的开发时间，3.06 亿波兰兹罗提（8100 万美元）的开发成本，交出了一份他们满意的答卷，高达 92 的媒体平均分，以及 IGN <em>“《巫师 3：狂猎》提升到了一个其他许多 RPG 无法企及的高度”</em> 的评价，加上各种年度 RPG 奖项，足够说明《巫师 3》有多好了。就更不用说“波兰蠢驴”之后还追加了 16 个免费 DLC 和把两个新游戏《石之心》与《血与酒》当 DLC 卖有多良心了。<code>（《血与酒》更是获得了 TGA2016 最佳 RPG 游戏的奖项）</code>《巫师 3》让 CDPR 彻底的成为了世界级公司，能取得今天的成就可谓实至名归。<br>&emsp;&emsp;他们出于对游戏的热爱而投身游戏领域，尽管知道盗版猖獗但仍未向其妥协，习惯用用实实在在的品质和后续的服务让玩家心甘情愿的掏钱，这就是我们的“波兰蠢驴”。回到开头，这就不难理解为什么《赛博朋克 2077》开放预购一小时后就一举夺得 STEAM 销量榜的冠军，受无数游戏玩家期待。没有他们心中那份对玩家足够的诚意与对游戏的热爱，怎么会有 CDPR 数次把公司前途押上的豪赌？怎么会有诺维格瑞的万家灯火？怎么会有凯尔莫罕天空中略过的飞鸟？我们 2077 年的不夜城见！也希望 CDPR 能继续做我们心中的绿洲。</p><p><img src="https://s2.loli.net/2022/07/10/XHJ2eFjTBELMI9y.png" alt="Cyberpunk2077"><br><em>“波兰蠢驴”你们可千万别破产了呀！</em></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(一)-从本地库开始</title>
      <link href="/archives/3cb7cd1a.html"/>
      <url>/archives/3cb7cd1a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-学习笔记-一"><a href="#Git-学习笔记-一" class="headerlink" title="Git 学习笔记(一)"></a>Git 学习笔记(一)</h1><div class="note info flat"><p>作为一个刚接触 Git 不久的小白，该笔记是这两天我在网上看视频和教程自己总结记录下来的，主要为了方便未来自己查阅和帮助像我一样的小白学习 Git。文章中斜体部分为我自己方便记忆的理解，如有错误还请指正，见谅！</p></div><h2 id="Git-的一点介绍"><a href="#Git-的一点介绍" class="headerlink" title="Git 的一点介绍"></a>Git 的一点介绍</h2><h3 id="Git-下载地址："><a href="#Git-下载地址：" class="headerlink" title="Git 下载地址："></a>Git 下载地址：</h3><p><code>https://git-scm.com/</code></p><h3 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h3><p>&emsp;百度百科的介绍是：</p><blockquote><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></blockquote><p><em>可以理解为一个小秘书来帮你打理你的项目，让你专注于项目上，而不是被错综复杂的项目版本和文件弄晕。</em></p><h3 id="Git-记录的是什么"><a href="#Git-记录的是什么" class="headerlink" title="Git 记录的是什么"></a>Git 记录的是什么</h3><p>&emsp;集中式版本控制系统 SVN 记录的是每一次版本变动的内容，Git 则是将项目的每个版本独立保存。Git 通过维护 <strong>工作区域</strong> <strong>暂存区域</strong> <strong>Git 仓库</strong> 来实现版本控制。<em>你可以理解为三座在本地的仓库。</em></p><h3 id="Git-管理的文件的三种状态"><a href="#Git-管理的文件的三种状态" class="headerlink" title="Git 管理的文件的三种状态"></a>Git 管理的文件的三种状态</h3><ul><li>已修改（modified）</li><li>已暂存（staged）</li><li>已提交（committed）</li></ul><h2 id="Git-的使用流程"><a href="#Git-的使用流程" class="headerlink" title="Git 的使用流程"></a>Git 的使用流程</h2><h3 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h3><p>&emsp;和游戏或 APP 一样，下载完之后要在命令行或在 GitBash 中输入以下命令来注册个账号<br>&emsp; <code>git config --global user.name &quot;你随便起的ID&quot;</code><br>&emsp; <code>git config --global user.email &quot;你的邮箱&quot;</code><br>&emsp;使用时首先要在工作的文件夹初始化 Git，你可以在命令行中进入工作文件夹目录也可以以直接在文件夹右键选择 Git Bash Here 然后输入：<br>&emsp;<code>git init</code><br>&emsp;<em>这样就相当于你告诉了 git：“这个文件夹需要你帮我管理。”</em><br>&emsp;这里就成了这个项目的根目录，也就是<strong>工作区域</strong>。初始化完成后该目录下会多了一个<code>.git</code>的目录，这个目录就是 Git 用来跟踪管理版本库的，没事不要手动修改这个目录里的文件。（如果没看到也没关系，因为该目录默认是隐藏的。）</p><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><ul><li><p>当你对项目进行一顿操作后可以使用<br><code>git add 文件名 ---就是将指定文件添加到暂存区</code><br><code>git add ./-A/--all/* ---可以提交工作区中所有的文件</code><br>将文件添加到<strong>暂存区</strong>，也就是上面提到三座仓库中的第二座，这个区域区如其名，只是临时保存你的改动。<br><em>可以理解为小秘书记在随身携带的临时笔记本上。</em></p></li><li><p>当你完成了某个改动、变更了某项设置、写完了一个章节就可以使用<br><code>git commit -m &quot;提交说明(你干了啥)&quot;</code><br>&emsp;将暂存区文件提交到 <strong>Git 仓库</strong>，也就是上面提到的本地的第三座仓库。就相当于你告诉秘书：<em>“这些你都帮我打印出来放到 <strong>Git 仓库</strong>存个档。”</em><br>&emsp;<em>提交说明就相当于一个档案上贴的小标签比如‘三年二班期末考试成绩’方便自己或别人查阅仓库中存档的档案</em></p><div class="note info no-icon flat"><p>修改最后一次提交:<br> 执行带 –amend 选项的 commit 提交命令 Git 就会更正最近的一次提交<br>git commit –amend<br>如果不希望修改:q!退出后包保留旧的说明</p></div></li></ul><h3 id="查看状态与提交历史"><a href="#查看状态与提交历史" class="headerlink" title="查看状态与提交历史"></a>查看状态与提交历史</h3><ul><li><code>git status</code>可以查看目前工作区和暂存区的状态。 <em>就相当于你把秘书叫过来核对下</em><br> 当你在工作区新增了某些文件后使用此命令秘书就会告诉你:<br><code>Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</code><br><em>“你放了个文件进来怎么都不和我说一声，快用 add 命令添加进仓库里。”</em>:</li></ul><p>&emsp;&emsp;当你在工作区删除或者更改了某些文件后使用此命令秘书就会告诉你:<br>&emsp;&emsp;<code>Changes not staged for commit:</code><br>&emsp;&emsp;<code>(use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</code><br>&emsp;&emsp;<code>(use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</code><br>&emsp;&emsp;_“你的工作区和我上次过来的时候不一样了，某某文件删掉了，某某文件变更了，你想确认更改或者删掉文件或者让我把这些文件按照 <strong>暂存区</strong> 恢复回来都可以。”_<br>&emsp;&emsp;你会注意到我上面说的，使用 <code>git restore file</code> 指令 git 小秘书是从<strong>暂存区</strong>来恢复文件的，如果需要从<strong>Git 仓库</strong>来恢复，小秘书需要去仓库查档案，而且你也需要告诉他是恢复成哪次存档的版本，也就是下面关于版本回退提到的<code>git reset</code>命令。</p><ul><li><code>git log</code> 可以查看 <strong>Git 仓库</strong> 的历史提交记录。记录中会显示你每次 commit 到 <strong>Git 仓库</strong> 的历史记录，包含每次提交的 id、提交人、日期、提交说明等信息。<div class="note info no-icon flat"><p>图形化显示快照<br>git log –decorate –oneline –graph –all<br>–graph 图形化显示<br>–all 显示所有快照</p></div></li></ul><h3 id="关于版本回退"><a href="#关于版本回退" class="headerlink" title="关于版本回退"></a>关于版本回退</h3><div class="note info no-icon flat"><pre><code>             -add-&gt;            -commit-&gt;</code></pre><p>WorkingDirectory —— Stage(Index) —— Repository(HEAD)<br>               &lt;-restore-          &lt;-reset-</p></div><ul><li><p>回滚指定快照<br><code>git reset 至少前5位的版本快照号</code></p></li><li><p>回滚个别文件<br><code>git reset 版本快照 文件名/路径</code></p></li><li><p><code>git reset HEAD~</code> 其中 <code>HEAD~</code>表示回滚到上个版本的快照,如果两个<code>~~</code>就表示回滚到上上个版本的快照,或写作 <code>git reset HEAD~2</code>往后同理， <em>你可以叫 Git 小秘书去<strong>Git 仓库</strong> 里查任意时候的档案</em></p></li></ul><p><em>一般情况下为了防止将你的工作区弄乱，你的小秘书一般都是将查到的档案记在她随身携带的笔记本（<strong>暂存区</strong>）上。</em><br>所以一般当你不设置<code>reset</code>指令的参数的时，Git 默认使用<code>--mixed</code>参数，如<code>git reset --mixed HEAD~</code><br><code>--mixed</code> 参数表示:</p><ol><li>移动 HEAD 的指向，将其指向上一个快照</li><li>将 HEAD 移动后指向的快照回滚到暂存区域</li></ol><p>与之相对的<code>reset</code>指令还有其他一些参数比如：</p><ul><li><code>git reset --soft HEAD~</code><br>–soft 参数表示 移动 HEAD 的指向将其指向上一个快照，并不会修改暂存区，也就相当于撤回上一次的提交。</li><li><code>git reset --hard HEAD~</code><br>–hard 参数表示:</li></ul><ol><li><p> 移动 HEAD 的指向，将其指向上一个快照</p></li><li><p> 将 HEAD 移动后指向的快照回滚到暂存区域</p></li><li><p> 将暂存区域的文件还原到工作目录 （会覆盖掉工作目录里最新的文件！！！）</p></li></ol><div class="note info no-icon flat"><p><code>reset</code> 指令不仅可以回滚还可以往前滚，如果上面使用了<code>reset</code>指令撤销了上次提交，这时<code>git log</code>是看不到前面版本的 ID 的，需要使用<code>git reflog</code>查看所有操作的日志。</p></div><h3 id="关于-diff-命令"><a href="#关于-diff-命令" class="headerlink" title="关于 diff 命令"></a>关于 diff 命令</h3><p>diff 顾名思义就是不同，使用<code>git diff</code>不加任何参数就是比较<strong>暂存区域</strong>和<strong>工作目录</strong>的差异。</p><ul><li><p>比较两个历史快照<br><code>git diff 快照ID1 快照ID2</code></p></li><li><p>比较当前工作目录和 GIt 仓库中的快照<br><code>git diff 快照ID</code></p></li><li><p>比较当前工作目录和 GIt 仓库中的快照<br><code>git diff 快照ID</code></p></li><li><p>比较最新的一份快照和当前工作目录<br><code>git diff HEAD</code></p></li><li><p>比较暂存区域和 Git 仓库快照<br><code>git diff --cached 快照 ID</code></p><div class="note info no-icon flat"><p>  显示的格式正是 Unix 通用的 diff 格式，查看常用如下键盘操作：</p><ul><li><p>移动命令<br>J 向下移一行 K 向上移一行<br>F 向下移一页 B 向上移一页<br>D 向下移半页 U 向上移半页</p></li><li><p>跳转命令<br>g 跳到第一行<br>G 跳到最后一行<br>num g 跳到第 num 行<br>num G 跳到倒数第 num 行</p></li><li><p>搜索命令<br>/ +关键词 从上往下搜索关键词<br>? +关键词 从下往上搜索关键词<br>n 跳转到下一个搜索结果</p></li><li><p>h 帮助文档</p></li><li><p>q 退出</p></li></ul></div></li></ul><h3 id="其他文件操作"><a href="#其他文件操作" class="headerlink" title="其他文件操作"></a>其他文件操作</h3><ul><li>删除文件<br><code>git rm 文件名</code>此命令会删除工作目录和暂存区域的文件，也就是取消跟踪，在下次提交时不纳入版本管理，不会删除在仓库快照里的文件。<blockquote><p>如果你工作区和暂存区有两个不同的文件 git 会不知道你删除哪个<br>使用-f 指令强制删除工作区和暂存区文件<br>使用–cached 文件名 只删除暂存区的文件</p></blockquote></li><li>重命名文件<br><code>git mv 旧文件名 新文件名</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
